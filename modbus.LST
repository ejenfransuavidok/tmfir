C51 COMPILER V9.53.0.0   MODBUS                                                            05/04/2020 02:22:24 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN modbus.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE modbus.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <stdio.h>
   2          #include "si_toolchain.h"
   3          #include "C8051F120_defs.h"
   4          
   5          #include "modbus.h"
   6          #include "F120_FlashUtils.h"
   7          
   8          int modbus_receiver_pointer = 0;
   9          int modbus_transmitter_pointer_right = 0;
  10          int modbus_transmitter_pointer_left = 0;
  11          int sender_pause_timer = 0;
  12          
  13          
  14          
  15          SI_SEGMENT_VARIABLE(modbus_command_receiver[MODBUS_RECEIVER_LENGTH], uint8_t, xdata);
  16          SI_SEGMENT_VARIABLE(modbus_command_transmitter[MODBUS_TRANSMITTER_LENGTH], uint8_t, xdata);
  17          SI_SEGMENT_VARIABLE(modbus_buffer_data[MODBUS_DATA_LENGTH], uint8_t, xdata);
  18          SI_SEGMENT_VARIABLE(modbus_error_response[5], uint8_t, xdata);
  19          void (*init_after_flash_reload_func_pointer)(void);
  20          
  21          uint8_t * getModbusBufferData() {
  22   1        return modbus_buffer_data;
  23   1      }
  24          
  25          void restore_fir() {
  26   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
  27   1        SFRPAGE_save = SFRPAGE;
  28   1        SFRPAGE = TMR4_PAGE;
  29   1        TR4 = 1;
  30   1        SFRPAGE = UART0_PAGE;
  31   1        AD0EN = 1;
  32   1        SFRPAGE = SFRPAGE_save;
  33   1      }
  34          
  35          void modbus_init_from_flash(void (*init_after_flash_reload)(void)) {
  36   1        FLASH_Read (modbus_buffer_data, MODBUS_FLASH_ADDRESS, 3000, 0);
  37   1        init_after_flash_reload_func_pointer = init_after_flash_reload;
  38   1        init_after_flash_reload_func_pointer();
  39   1      }
  40          
  41          void resetFlashUpdate() {
  42   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_0] = 0;
  43   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_1] = 0; 
  44   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_2] = 0;
  45   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_3] = 0; 
  46   1      }
  47          
  48          bool isNeedFlashUpdate() {
  49   1        return
  50   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_0] == 0x11 &&
  51   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_1] == 0x11 &&
  52   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_2] == 0x22 &&
  53   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_3] == 0x22;
  54   1      }
  55          
C51 COMPILER V9.53.0.0   MODBUS                                                            05/04/2020 02:22:24 PAGE 2   

  56          uint16_t crc16_update(uint16_t crc, uint8_t a) {
  57   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  58   1        crc ^= (uint16_t)a;
  59   1        for (i = 0; i < 8; ++i) {
  60   2          if (crc & 1)
  61   2            crc = (crc >> 1) ^ 0xA001;
  62   2          else
  63   2            crc = (crc >> 1);
  64   2        }
  65   1        return crc;
  66   1      }
  67          
  68          uint16_t calc_crc(uint8_t * command, int size_command) {
  69   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
  70   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  71   1        crc = 0xFFFF;
  72   1        i = 0;
  73   1        for(i=0; i<size_command; i++) {
  74   2          crc = crc16_update(crc, (uint8_t) command [i]);
  75   2        }
  76   1        return crc;
  77   1      }
  78          
  79          bool modbus_check_crc(uint8_t * command_receiver, int receiver_pointer) {
  80   1        if(receiver_pointer > 2) {
  81   2          uint16_t crc_calc = calc_crc(command_receiver, receiver_pointer - 2);
  82   2          uint16_t crc = command_receiver [receiver_pointer - 1];
  83   2          crc = (crc << 8) + command_receiver [receiver_pointer - 2];
  84   2          return crc_calc == crc;
  85   2        }
  86   1        return false;
  87   1      }
  88          
  89          uint8_t modbus_get_address() {
  90   1        return modbus_buffer_data [MODBUS_ADDRESS_IN_MEMORY];
  91   1      }
  92          
  93          bool modbus_check_address() {
  94   1        return modbus_get_address() == modbus_command_receiver [MODBUS_ADDRESS]
  95   1          || modbus_command_receiver [MODBUS_ADDRESS] == MODBUS_BROADCAST_ADDRESS;
  96   1      }
  97          
  98          uint8_t modbus_get_function() {
  99   1        return modbus_command_receiver [MODBUS_FUNCTION];
 100   1      }
 101          
 102          void modbus_response_error(uint8_t error) {
 103   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 104   1        SI_SEGMENT_VARIABLE(i, int, xdata);
 105   1        crc = 0xFFFF;
 106   1        i = 0;
 107   1        modbus_error_response [MODBUS_ADDRESS] = modbus_get_address();
 108   1        modbus_error_response [MODBUS_ERROR] = MODBUS_ERROR_CODE;
 109   1        modbus_error_response [MODBUS_EXCEPTION] = error;
 110   1        crc = calc_crc(modbus_error_response, 3);
 111   1        modbus_error_response [3] = (uint8_t)(crc >> 8);
 112   1        modbus_error_response [4] = (uint8_t)(crc);
 113   1        for(i = 0; i<5; i++) {
 114   2          modbus_push_transmit_buffer(modbus_error_response [i]);
 115   2        }
 116   1      }
 117          
C51 COMPILER V9.53.0.0   MODBUS                                                            05/04/2020 02:22:24 PAGE 3   

 118          int modbus_process_function_3() {
 119   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 120   1        SI_SEGMENT_VARIABLE(i, uint16_t, xdata);
 121   1        SI_SEGMENT_VARIABLE(register_hi, uint16_t, xdata);
 122   1        SI_SEGMENT_VARIABLE(register_lo, uint16_t, xdata);
 123   1        SI_SEGMENT_VARIABLE(modbus_data, uint8_t, xdata);
 124   1        SI_SEGMENT_VARIABLE(address_hi, uint16_t, xdata);
 125   1        SI_SEGMENT_VARIABLE(address_lo, uint16_t, xdata);
 126   1        SI_SEGMENT_VARIABLE(address, uint16_t, xdata);
 127   1        SI_SEGMENT_VARIABLE(registers_hi, uint16_t, xdata);
 128   1        SI_SEGMENT_VARIABLE(registers_lo, uint16_t, xdata);
 129   1        SI_SEGMENT_VARIABLE(registers, uint16_t, xdata);
 130   1        SI_SEGMENT_VARIABLE(number, uint8_t, xdata);
 131   1        crc = 0xFFFF;
 132   1      
 133   1        address_hi = modbus_command_receiver [MODBUS_FIRST_REGISTER_HI];
 134   1        address_lo = modbus_command_receiver [MODBUS_FIRST_REGISTER_LO];
 135   1        address = (address_hi << 8) + address_lo;
 136   1        registers_hi = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_READ_HI];
 137   1        registers_lo = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_READ_LO];
 138   1        registers = (registers_hi << 8) + registers_lo;
 139   1        number = registers << 1;
 140   1        if((address << 1) + number >= MODBUS_DATA_LENGTH) {
 141   2          modbus_response_error(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
 142   2          return MODBUS_FAIL;
 143   2        }
 144   1        else {
 145   2          modbus_data = modbus_get_address();
 146   2          crc = crc16_update(crc, modbus_data);
 147   2          modbus_push_transmit_buffer(modbus_data);
 148   2          
 149   2          modbus_data = 3;
 150   2          crc = crc16_update(crc, modbus_data);
 151   2          modbus_push_transmit_buffer(modbus_data);
 152   2          
 153   2          modbus_data = number;
 154   2          crc = crc16_update(crc, modbus_data);
 155   2          modbus_push_transmit_buffer(modbus_data);
 156   2          
 157   2          for(i=0; i<registers; i++) {
 158   3            register_lo = modbus_buffer_data [(address << 1) + (i << 1)];
 159   3            register_hi = modbus_buffer_data [(address << 1) + (i << 1) + 1];
 160   3            modbus_data = register_lo;
 161   3            crc = crc16_update(crc, modbus_data);
 162   3            modbus_push_transmit_buffer(modbus_data);
 163   3            modbus_data = register_hi;
 164   3            crc = crc16_update(crc, modbus_data);
 165   3            modbus_push_transmit_buffer(modbus_data);
 166   3          }
 167   2          modbus_push_transmit_buffer((uint8_t)(crc));
 168   2          modbus_push_transmit_buffer((uint8_t)(crc >> 8));
 169   2          TI0 = 1;
 170   2          return MODBUS_GOOD;
 171   2          //AD0EN = 1;
 172   2        }
 173   1      }
 174          
 175          bool modbus_check_size_of_func16(int registers_num) {
 176   1        return modbus_receiver_pointer == (MODBUS_FUNCTION_16_BASE_LENGTH + (registers_num << 1));
 177   1      }
 178          
 179          int modbus_process_function_16() {
C51 COMPILER V9.53.0.0   MODBUS                                                            05/04/2020 02:22:24 PAGE 4   

 180   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 181   1        SI_SEGMENT_VARIABLE(i, uint16_t, xdata);
 182   1        SI_SEGMENT_VARIABLE(p, uint16_t, xdata);
 183   1        SI_SEGMENT_VARIABLE(register_hi, uint16_t, xdata);
 184   1        SI_SEGMENT_VARIABLE(register_lo, uint16_t, xdata);
 185   1        SI_SEGMENT_VARIABLE(register_in_hi, uint8_t, xdata);
 186   1        SI_SEGMENT_VARIABLE(register_in_lo, uint8_t, xdata);
 187   1        SI_SEGMENT_VARIABLE(modbus_data, uint8_t, xdata);
 188   1        SI_SEGMENT_VARIABLE(address_hi, uint8_t, xdata);
 189   1        SI_SEGMENT_VARIABLE(address_lo, uint8_t, xdata);
 190   1        SI_SEGMENT_VARIABLE(address, uint16_t, xdata);
 191   1        SI_SEGMENT_VARIABLE(registers_hi, uint8_t, xdata);
 192   1        SI_SEGMENT_VARIABLE(registers_lo, uint8_t, xdata);
 193   1        SI_SEGMENT_VARIABLE(registers, uint16_t, xdata);
 194   1        SI_SEGMENT_VARIABLE(number, uint16_t, xdata);
 195   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
 196   1        
 197   1        SFRPAGE_save = SFRPAGE;
 198   1        crc = 0xFFFF;
 199   1        
 200   1        address_hi = modbus_command_receiver [MODBUS_FIRST_REGISTER_HI];
 201   1        address_lo = modbus_command_receiver [MODBUS_FIRST_REGISTER_LO];
 202   1        address = (address_hi << 8) + address_lo;
 203   1        registers_hi = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_WRITE_HI];
 204   1        registers_lo = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_WRITE_LO];
 205   1        registers = (registers_hi << 8) + registers_lo;
 206   1        number = registers << 1;
 207   1        if(((address << 1) + number >= MODBUS_DATA_LENGTH) || !modbus_check_size_of_func16(registers)) {
 208   2          modbus_response_error(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
 209   2          return MODBUS_FAIL;
 210   2        }
 211   1        else {
 212   2          resetFlashUpdate();
 213   2          for(i=0; i<registers; i++) {
 214   3            register_in_hi = modbus_command_receiver [(i << 1) + MODBUS_WRITE_REGISTER_OFFSET];
 215   3            register_in_lo = modbus_command_receiver [(i << 1) + 1 + MODBUS_WRITE_REGISTER_OFFSET];
 216   3            register_hi = (address << 1) + (i << 1);
 217   3            register_lo = (address << 1) + (i << 1) + 1;
 218   3            modbus_buffer_data [register_lo] = register_in_lo;
 219   3            modbus_buffer_data [register_hi] = register_in_hi;
 220   3          }
 221   2          modbus_data = modbus_get_address();
 222   2          crc = crc16_update(crc, modbus_data);
 223   2          modbus_push_transmit_buffer(modbus_data);
 224   2          
 225   2          modbus_data = 16;
 226   2          crc = crc16_update(crc, modbus_data);
 227   2          modbus_push_transmit_buffer(modbus_data);
 228   2          
 229   2          modbus_data = address_hi;
 230   2          crc = crc16_update(crc, modbus_data);
 231   2          modbus_push_transmit_buffer(modbus_data);
 232   2          
 233   2          modbus_data = address_lo;
 234   2          crc = crc16_update(crc, modbus_data);
 235   2          modbus_push_transmit_buffer(modbus_data);
 236   2          
 237   2          modbus_data = registers_hi;
 238   2          crc = crc16_update(crc, modbus_data);
 239   2          modbus_push_transmit_buffer(modbus_data);
 240   2          
 241   2          modbus_data = registers_lo;
C51 COMPILER V9.53.0.0   MODBUS                                                            05/04/2020 02:22:24 PAGE 5   

 242   2          crc = crc16_update(crc, modbus_data);
 243   2          modbus_push_transmit_buffer(modbus_data);
 244   2          
 245   2          modbus_push_transmit_buffer((uint8_t)(crc));
 246   2          modbus_push_transmit_buffer((uint8_t)(crc >> 8));
 247   2          
 248   2          if (isNeedFlashUpdate()) {
 249   3            for (p=0; p<4; p++) {
 250   4              // 4 - pages (one page size is 1024)
 251   4              FLASH_Update(MODBUS_FLASH_ADDRESS + p * 1024, modbus_buffer_data + p * 1024, 1024, 0);
 252   4            }
 253   3          }
 254   2          TI0 = 1;
 255   2          return MODBUS_GOOD;
 256   2          //AD0EN = 1;
 257   2        }
 258   1      }
 259          
 260          void modbus_command_received() {
 261   1        SI_SEGMENT_VARIABLE(modbus_result, char, xdata);
 262   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
 263   1        
 264   1        modbus_result = MODBUS_FAIL;
 265   1        SFRPAGE_save = SFRPAGE;
 266   1        
 267   1        if(modbus_check_crc(modbus_command_receiver, modbus_receiver_pointer) && modbus_check_address()) {
 268   2          uint8_t function = modbus_get_function();
 269   2          if(function == 3 || function == 16) {
 270   3            if(function ==3) {
 271   4              modbus_result = modbus_process_function_3();
 272   4            }
 273   3            else {
 274   4              modbus_result = modbus_process_function_16();
 275   4            }
 276   3            if (modbus_receiver_pointer < 0xFF) {
 277   4              restore_fir();
 278   4            }
 279   3          }
 280   2          else {
 281   3            modbus_response_error(MODBUS_ERROR_ILLEGAL_FUNCTION_CODE);
 282   3          }
 283   2          //modbus_receiver_pointer = 0;
 284   2        }
 285   1        sender_pause_timer = 0;
 286   1        modbus_receiver_pointer = 0;
 287   1        if (modbus_result == MODBUS_FAIL) {
 288   2          restore_fir();
 289   2        } else {
 290   2          init_after_flash_reload_func_pointer();
 291   2        }
 292   1      }
 293          
 294          int get_modbus_receiver_counter() {
 295   1        return sender_pause_timer;
 296   1      }
 297          
 298          void set_modbus_receiver_counter(int mrc) {
 299   1        sender_pause_timer = mrc;
 300   1      }
 301          
 302          void inc_modbus_receiver_counter() {
 303   1        sender_pause_timer++;
C51 COMPILER V9.53.0.0   MODBUS                                                            05/04/2020 02:22:24 PAGE 6   

 304   1      }
 305          
 306          void modbus_byte_receive(uint8_t input) {
 307   1        sender_pause_timer = 0;
 308   1        modbus_command_receiver [modbus_receiver_pointer++] = input;
 309   1        if(modbus_receiver_pointer == MODBUS_RECEIVER_LENGTH) {
 310   2          modbus_receiver_pointer = 0;
 311   2        }
 312   1      }
 313          
 314          void modbus_transmit_byte() {
 315   1        if(modbus_transmitter_pointer_right > 0) {
 316   2          SBUF0 = modbus_command_transmitter [modbus_transmitter_pointer_left++];
 317   2          if (modbus_transmitter_pointer_left == MODBUS_TRANSMITTER_LENGTH) {
 318   3            modbus_transmitter_pointer_left = 0;
 319   3          }
 320   2        }
 321   1        if(modbus_transmitter_pointer_right == modbus_transmitter_pointer_left) {
 322   2          modbus_transmitter_pointer_right = 0;
 323   2          modbus_transmitter_pointer_left = 0;
 324   2        }
 325   1      }
 326          
 327          void modbus_push_transmit_buffer(uint8_t output) {
 328   1         /*
 329   1         if(output == '\n') {
 330   1           modbus_command_transmitter[modbus_transmitter_pointer_right++] = 0x0d;
 331   1         }
 332   1         else {
 333   1           modbus_command_transmitter[modbus_transmitter_pointer_right++] = output;
 334   1         }
 335   1         */
 336   1         modbus_command_transmitter[modbus_transmitter_pointer_right++] = output;
 337   1         if(modbus_transmitter_pointer_right == MODBUS_TRANSMITTER_LENGTH) {
 338   2              modbus_transmitter_pointer_right = 0;
 339   2         }
 340   1      }
 341          
 342          bool modbus_was_sendind_received() {
 343   1        sender_pause_timer++;
 344   1        return (sender_pause_timer > 6 && modbus_receiver_pointer > 0);
 345   1      }
 346          
 347          bool modbus_transmit_buffer_is_empty() {
 348   1        return modbus_transmitter_pointer_right == 0;
 349   1      }
 350          
 351          unsigned char modbus_get_freq_divider() {
 352   1        return modbus_buffer_data [MODBUS_FREQ_DIVIDER_ADDRESS];
 353   1      }
 354          
 355          void modbus_init_freqs(unsigned long * freqs) {
 356   1         SI_SEGMENT_VARIABLE(i, char, xdata);
 357   1         SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
 358   1         SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
 359   1         SI_SEGMENT_VARIABLE(address, unsigned short int, xdata);
 360   1         address = MODBUS_FREQ_VALUES_START_ADDRESS;
 361   1         for (i=0; i<12; i++) {
 362   2            hi = modbus_buffer_data [address];
 363   2            lo = modbus_buffer_data [address + 1];
 364   2            freqs [i] = (hi << 8) + lo;
 365   2            address += 2;
C51 COMPILER V9.53.0.0   MODBUS                                                            05/04/2020 02:22:24 PAGE 7   

 366   2         }
 367   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2052    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   5053      64
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
