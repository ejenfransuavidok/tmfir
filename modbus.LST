C51 COMPILER V9.53.0.0   MODBUS                                                            04/26/2020 23:14:45 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN modbus.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE modbus.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <stdio.h>
   2          #include "si_toolchain.h"
   3          #include "C8051F120_defs.h"
   4          
   5          #include "modbus.h"
   6          #include "F120_FlashUtils.h"
   7          
   8          int modbus_receiver_pointer = 0;
   9          int modbus_transmitter_pointer_right = 0;
  10          int modbus_transmitter_pointer_left = 0;
  11          int sender_pause_timer = 0;
  12          SI_SEGMENT_VARIABLE(modbus_command_receiver[MODBUS_RECEIVER_LENGTH], uint8_t, xdata);
  13          SI_SEGMENT_VARIABLE(modbus_command_transmitter[MODBUS_TRANSMITTER_LENGTH], uint8_t, xdata);
  14          SI_SEGMENT_VARIABLE(modbus_buffer_data[MODBUS_DATA_LENGTH], uint8_t, xdata);
  15          SI_SEGMENT_VARIABLE(modbus_error_response[5], uint8_t, xdata);
  16          void (*init_after_flash_reload_func_pointer)(void);
  17          
  18          uint8_t * getModbusBufferData() {
  19   1        return modbus_buffer_data;
  20   1      }
  21          
  22          void restore_fir() {
  23   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
  24   1        SFRPAGE_save = SFRPAGE;
  25   1        SFRPAGE = TMR4_PAGE;
  26   1        TR4 = 1;
  27   1        SFRPAGE = UART0_PAGE;
  28   1        AD0EN = 1;
  29   1        SFRPAGE = SFRPAGE_save;
  30   1      }
  31          
  32          void modbus_init_from_flash(void (*init_after_flash_reload)(void)) {
  33   1        FLASH_Read (modbus_buffer_data, MODBUS_FLASH_ADDRESS, 3000, 0);
  34   1        init_after_flash_reload_func_pointer = init_after_flash_reload;
  35   1        init_after_flash_reload_func_pointer();
  36   1      }
  37          
  38          void resetFlashUpdate() {
  39   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_0] = 0;
  40   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_1] = 0; 
  41   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_2] = 0;
  42   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_3] = 0; 
  43   1      }
  44          
  45          bool isNeedFlashUpdate() {
  46   1        return
  47   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_0] == 0x11 &&
  48   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_1] == 0x11 &&
  49   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_2] == 0x22 &&
  50   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_3] == 0x22;
  51   1      }
  52          
  53          uint16_t crc16_update(uint16_t crc, uint8_t a) {
  54   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  55   1        crc ^= (uint16_t)a;
C51 COMPILER V9.53.0.0   MODBUS                                                            04/26/2020 23:14:45 PAGE 2   

  56   1        for (i = 0; i < 8; ++i) {
  57   2          if (crc & 1)
  58   2            crc = (crc >> 1) ^ 0xA001;
  59   2          else
  60   2            crc = (crc >> 1);
  61   2        }
  62   1        return crc;
  63   1      }
  64          
  65          uint16_t calc_crc(uint8_t * command, int size_command) {
  66   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
  67   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  68   1        crc = 0xFFFF;
  69   1        i = 0;
  70   1        for(i=0; i<size_command; i++) {
  71   2          crc = crc16_update(crc, (uint8_t) command [i]);
  72   2        }
  73   1        return crc;
  74   1      }
  75          
  76          bool modbus_check_crc(uint8_t * command_receiver, int receiver_pointer) {
  77   1        if(receiver_pointer > 2) {
  78   2          uint16_t crc_calc = calc_crc(command_receiver, receiver_pointer - 2);
  79   2          uint16_t crc = command_receiver [receiver_pointer - 1];
  80   2          crc = (crc << 8) + command_receiver [receiver_pointer - 2];
  81   2          return crc_calc == crc;
  82   2        }
  83   1        return false;
  84   1      }
  85          
  86          uint8_t modbus_get_address() {
  87   1        return modbus_buffer_data [MODBUS_ADDRESS_IN_MEMORY];
  88   1      }
  89          
  90          bool modbus_check_address() {
  91   1        return modbus_get_address() == modbus_command_receiver [MODBUS_ADDRESS]
  92   1          || modbus_command_receiver [MODBUS_ADDRESS] == MODBUS_BROADCAST_ADDRESS;
  93   1      }
  94          
  95          uint8_t modbus_get_function() {
  96   1        return modbus_command_receiver [MODBUS_FUNCTION];
  97   1      }
  98          
  99          void modbus_response_error(uint8_t error) {
 100   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 101   1        SI_SEGMENT_VARIABLE(i, int, xdata);
 102   1        crc = 0xFFFF;
 103   1        i = 0;
 104   1        modbus_error_response [MODBUS_ADDRESS] = modbus_get_address();
 105   1        modbus_error_response [MODBUS_ERROR] = MODBUS_ERROR_CODE;
 106   1        modbus_error_response [MODBUS_EXCEPTION] = error;
 107   1        crc = calc_crc(modbus_error_response, 3);
 108   1        modbus_error_response [3] = (uint8_t)(crc >> 8);
 109   1        modbus_error_response [4] = (uint8_t)(crc);
 110   1        for(i = 0; i<5; i++) {
 111   2          modbus_push_transmit_buffer(modbus_error_response [i]);
 112   2        }
 113   1      }
 114          
 115          int modbus_process_function_3() {
 116   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 117   1        SI_SEGMENT_VARIABLE(i, uint16_t, xdata);
C51 COMPILER V9.53.0.0   MODBUS                                                            04/26/2020 23:14:45 PAGE 3   

 118   1        SI_SEGMENT_VARIABLE(register_hi, uint16_t, xdata);
 119   1        SI_SEGMENT_VARIABLE(register_lo, uint16_t, xdata);
 120   1        SI_SEGMENT_VARIABLE(modbus_data, uint8_t, xdata);
 121   1        SI_SEGMENT_VARIABLE(address_hi, uint16_t, xdata);
 122   1        SI_SEGMENT_VARIABLE(address_lo, uint16_t, xdata);
 123   1        SI_SEGMENT_VARIABLE(address, uint16_t, xdata);
 124   1        SI_SEGMENT_VARIABLE(registers_hi, uint16_t, xdata);
 125   1        SI_SEGMENT_VARIABLE(registers_lo, uint16_t, xdata);
 126   1        SI_SEGMENT_VARIABLE(registers, uint16_t, xdata);
 127   1        SI_SEGMENT_VARIABLE(number, uint8_t, xdata);
 128   1        crc = 0xFFFF;
 129   1      
 130   1        address_hi = modbus_command_receiver [MODBUS_FIRST_REGISTER_HI];
 131   1        address_lo = modbus_command_receiver [MODBUS_FIRST_REGISTER_LO];
 132   1        address = (address_hi << 8) + address_lo;
 133   1        registers_hi = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_READ_HI];
 134   1        registers_lo = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_READ_LO];
 135   1        registers = (registers_hi << 8) + registers_lo;
 136   1        number = registers << 1;
 137   1        if((address << 1) + number >= MODBUS_DATA_LENGTH) {
 138   2          modbus_response_error(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
 139   2          return MODBUS_FAIL;
 140   2        }
 141   1        else {
 142   2          modbus_data = modbus_get_address();
 143   2          crc = crc16_update(crc, modbus_data);
 144   2          modbus_push_transmit_buffer(modbus_data);
 145   2          
 146   2          modbus_data = 3;
 147   2          crc = crc16_update(crc, modbus_data);
 148   2          modbus_push_transmit_buffer(modbus_data);
 149   2          
 150   2          modbus_data = number;
 151   2          crc = crc16_update(crc, modbus_data);
 152   2          modbus_push_transmit_buffer(modbus_data);
 153   2          
 154   2          for(i=0; i<registers; i++) {
 155   3            register_lo = modbus_buffer_data [(address << 1) + (i << 1)];
 156   3            register_hi = modbus_buffer_data [(address << 1) + (i << 1) + 1];
 157   3            modbus_data = register_lo;
 158   3            crc = crc16_update(crc, modbus_data);
 159   3            modbus_push_transmit_buffer(modbus_data);
 160   3            modbus_data = register_hi;
 161   3            crc = crc16_update(crc, modbus_data);
 162   3            modbus_push_transmit_buffer(modbus_data);
 163   3          }
 164   2          modbus_push_transmit_buffer((uint8_t)(crc >> 8));
 165   2          modbus_push_transmit_buffer((uint8_t)(crc));
 166   2          TI0 = 1;
 167   2          return MODBUS_GOOD;
 168   2          //AD0EN = 1;
 169   2        }
 170   1      }
 171          
 172          bool modbus_check_size_of_func16(int registers_num) {
 173   1        return modbus_receiver_pointer == (MODBUS_FUNCTION_16_BASE_LENGTH + (registers_num << 1));
 174   1      }
 175          
 176          int modbus_process_function_16() {
 177   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 178   1        SI_SEGMENT_VARIABLE(i, uint16_t, xdata);
 179   1        SI_SEGMENT_VARIABLE(p, uint16_t, xdata);
C51 COMPILER V9.53.0.0   MODBUS                                                            04/26/2020 23:14:45 PAGE 4   

 180   1        SI_SEGMENT_VARIABLE(register_hi, uint16_t, xdata);
 181   1        SI_SEGMENT_VARIABLE(register_lo, uint16_t, xdata);
 182   1        SI_SEGMENT_VARIABLE(register_in_hi, uint8_t, xdata);
 183   1        SI_SEGMENT_VARIABLE(register_in_lo, uint8_t, xdata);
 184   1        SI_SEGMENT_VARIABLE(modbus_data, uint8_t, xdata);
 185   1        SI_SEGMENT_VARIABLE(address_hi, uint8_t, xdata);
 186   1        SI_SEGMENT_VARIABLE(address_lo, uint8_t, xdata);
 187   1        SI_SEGMENT_VARIABLE(address, uint16_t, xdata);
 188   1        SI_SEGMENT_VARIABLE(registers_hi, uint8_t, xdata);
 189   1        SI_SEGMENT_VARIABLE(registers_lo, uint8_t, xdata);
 190   1        SI_SEGMENT_VARIABLE(registers, uint16_t, xdata);
 191   1        SI_SEGMENT_VARIABLE(number, uint16_t, xdata);
 192   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
 193   1        
 194   1        SFRPAGE_save = SFRPAGE;
 195   1        crc = 0xFFFF;
 196   1        
 197   1        address_hi = modbus_command_receiver [MODBUS_FIRST_REGISTER_HI];
 198   1        address_lo = modbus_command_receiver [MODBUS_FIRST_REGISTER_LO];
 199   1        address = (address_hi << 8) + address_lo;
 200   1        registers_hi = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_WRITE_HI];
 201   1        registers_lo = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_WRITE_LO];
 202   1        registers = (registers_hi << 8) + registers_lo;
 203   1        number = registers << 1;
 204   1        if(((address << 1) + number >= MODBUS_DATA_LENGTH) || !modbus_check_size_of_func16(registers)) {
 205   2          modbus_response_error(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
 206   2          return MODBUS_FAIL;
 207   2        }
 208   1        else {
 209   2          resetFlashUpdate();
 210   2          for(i=0; i<registers; i++) {
 211   3            register_in_hi = modbus_command_receiver [(i << 1) + MODBUS_WRITE_REGISTER_OFFSET];
 212   3            register_in_lo = modbus_command_receiver [(i << 1) + 1 + MODBUS_WRITE_REGISTER_OFFSET];
 213   3            register_hi = (address << 1) + (i << 1);
 214   3            register_lo = (address << 1) + (i << 1) + 1;
 215   3            modbus_buffer_data [register_lo] = register_in_lo;
 216   3            modbus_buffer_data [register_hi] = register_in_hi;
 217   3          }
 218   2          modbus_data = modbus_get_address();
 219   2          crc = crc16_update(crc, modbus_data);
 220   2          modbus_push_transmit_buffer(modbus_data);
 221   2          
 222   2          modbus_data = 16;
 223   2          crc = crc16_update(crc, modbus_data);
 224   2          modbus_push_transmit_buffer(modbus_data);
 225   2          
 226   2          modbus_data = address_hi;
 227   2          crc = crc16_update(crc, modbus_data);
 228   2          modbus_push_transmit_buffer(modbus_data);
 229   2          
 230   2          modbus_data = address_lo;
 231   2          crc = crc16_update(crc, modbus_data);
 232   2          modbus_push_transmit_buffer(modbus_data);
 233   2          
 234   2          modbus_data = registers_hi;
 235   2          crc = crc16_update(crc, modbus_data);
 236   2          modbus_push_transmit_buffer(modbus_data);
 237   2          
 238   2          modbus_data = registers_lo;
 239   2          crc = crc16_update(crc, modbus_data);
 240   2          modbus_push_transmit_buffer(modbus_data);
 241   2          
C51 COMPILER V9.53.0.0   MODBUS                                                            04/26/2020 23:14:45 PAGE 5   

 242   2          modbus_push_transmit_buffer((uint8_t)(crc >> 8));
 243   2          modbus_push_transmit_buffer((uint8_t)(crc));
 244   2          
 245   2          if (isNeedFlashUpdate()) {
 246   3            for (p=0; p<4; p++) {
 247   4              // 4 - pages (one page size is 1024)
 248   4              FLASH_Update(MODBUS_FLASH_ADDRESS + p * 1024, modbus_buffer_data + p * 1024, 1024, 0);
 249   4            }
 250   3            init_after_flash_reload_func_pointer();
 251   3          }
 252   2          TI0 = 1;
 253   2          return MODBUS_GOOD;
 254   2          //AD0EN = 1;
 255   2        }
 256   1      }
 257          
 258          bool modbus_command_received() {
 259   1        SI_SEGMENT_VARIABLE(modbus_result, char, xdata);
 260   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
 261   1        
 262   1        modbus_result = MODBUS_FAIL;
 263   1        SFRPAGE_save = SFRPAGE;
 264   1        
 265   1        if(modbus_check_crc(modbus_command_receiver, modbus_receiver_pointer) && modbus_check_address()) {
 266   2          uint8_t function = modbus_get_function();
 267   2          if(function == 3 || function == 16) {
 268   3            if(function ==3) {
 269   4              modbus_result = modbus_process_function_3();
 270   4            }
 271   3            else {
 272   4              modbus_result = modbus_process_function_16();
 273   4            }
 274   3            if (modbus_receiver_pointer < 0xFF) {
 275   4              restore_fir();
 276   4            }
 277   3          }
 278   2          else {
 279   3            modbus_response_error(MODBUS_ERROR_ILLEGAL_FUNCTION_CODE);
 280   3          }
 281   2          //modbus_receiver_pointer = 0;
 282   2        }
 283   1        sender_pause_timer = 0;
 284   1        modbus_receiver_pointer = 0;
 285   1        if (modbus_result == MODBUS_FAIL) {
 286   2          restore_fir();
 287   2        }
 288   1      }
*** WARNING C173 IN LINE 288 OF modbus.c: missing return-expression
 289          
 290          int get_modbus_receiver_counter() {
 291   1        return sender_pause_timer;
 292   1      }
 293          
 294          void set_modbus_receiver_counter(int mrc) {
 295   1        sender_pause_timer = mrc;
 296   1      }
 297          
 298          void inc_modbus_receiver_counter() {
 299   1        sender_pause_timer++;
 300   1      }
 301          
 302          void modbus_byte_receive(uint8_t input) {
C51 COMPILER V9.53.0.0   MODBUS                                                            04/26/2020 23:14:45 PAGE 6   

 303   1        sender_pause_timer = 0;
 304   1        modbus_command_receiver [modbus_receiver_pointer++] = input;
 305   1        if(modbus_receiver_pointer == MODBUS_RECEIVER_LENGTH) {
 306   2          modbus_receiver_pointer = 0;
 307   2        }
 308   1      }
 309          
 310          void modbus_transmit_byte() {
 311   1        if(modbus_transmitter_pointer_right > 0) {
 312   2          SBUF0 = modbus_command_transmitter [modbus_transmitter_pointer_left++];
 313   2          if (modbus_transmitter_pointer_left == MODBUS_TRANSMITTER_LENGTH) {
 314   3            modbus_transmitter_pointer_left = 0;
 315   3          }
 316   2        }
 317   1        if(modbus_transmitter_pointer_right == modbus_transmitter_pointer_left) {
 318   2          modbus_transmitter_pointer_right = 0;
 319   2          modbus_transmitter_pointer_left = 0;
 320   2        }
 321   1      }
 322          
 323          void modbus_push_transmit_buffer(uint8_t output) {
 324   1        if(output == '\n') {
 325   2           modbus_command_transmitter[modbus_transmitter_pointer_right++] = 0x0d;
 326   2           //TI0 = 1;
 327   2         }
 328   1         else {
 329   2           modbus_command_transmitter[modbus_transmitter_pointer_right++] = output;
 330   2           //TI0 = 1;
 331   2         }
 332   1         if(modbus_transmitter_pointer_right == MODBUS_TRANSMITTER_LENGTH) {
 333   2              modbus_transmitter_pointer_right = 0;
 334   2         }
 335   1      }
 336          
 337          bool modbus_was_sendind_received() {
 338   1        sender_pause_timer++;
 339   1        return (sender_pause_timer > 6 && modbus_receiver_pointer > 0);
 340   1      }
 341          
 342          bool modbus_transmit_buffer_is_empty() {
 343   1        return modbus_transmitter_pointer_right == 0;
 344   1      }
 345          
 346          unsigned char modbus_get_freq_divider() {
 347   1        return modbus_buffer_data [MODBUS_FREQ_DIVIDER_ADDRESS];
 348   1      }
 349          
 350          void modbus_init_freqs(unsigned long * freqs) {
 351   1         SI_SEGMENT_VARIABLE(i, char, xdata);
 352   1         SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
 353   1         SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
 354   1         SI_SEGMENT_VARIABLE(address, unsigned short int, xdata);
 355   1         address = MODBUS_FREQ_VALUES_START_ADDRESS;
 356   1         for (i=0; i<12; i++) {
 357   2            hi = modbus_buffer_data [address];
 358   2            lo = modbus_buffer_data [address + 1];
 359   2            freqs [i] = (hi << 8) + lo;
 360   2            address += 2;
 361   2         }
 362   1      }
*** WARNING C290 IN LINE 288 OF modbus.c: missing return value

C51 COMPILER V9.53.0.0   MODBUS                                                            04/26/2020 23:14:45 PAGE 7   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2080    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   5053      64
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
