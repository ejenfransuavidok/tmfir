C51 COMPILER V9.53.0.0   FIR                                                               04/18/2020 10:09:56 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FIR
OBJECT MODULE PLACED IN fir.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE fir.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "fir.h"
   2          
   3          int getFreqFromModbusForDAC(int number) {
   4   1        uint8_t hi;
   5   1        uint8_t lo;
   6   1        uint8_t * modbus_buffer_data;
   7   1        
   8   1        modbus_buffer_data = getModbusBufferData();
   9   1        
  10   1        hi = modbus_buffer_data[((MODBUS_OUTPUT_FREQ_FLAG_REGISTER_OFFSET + number) << 1)];
  11   1        lo = modbus_buffer_data[(((MODBUS_OUTPUT_FREQ_FLAG_REGISTER_OFFSET + number) << 1) + 1)];
  12   1        
  13   1        return ((hi << 8) + lo);
  14   1      }
  15          
  16          void populateFirAll(SI_UU16_t * coefficients) {
  17   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  18   1        SI_SEGMENT_VARIABLE(order, int, xdata);
  19   1        SI_SEGMENT_VARIABLE(temp, int, xdata);
  20   1        SI_SEGMENT_VARIABLE(coefficientIndex, int, xdata);
  21   1        SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
  22   1        SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
  23   1        
  24   1        uint8_t * modbus_buffer_data;
  25   1        coefficientIndex = MODBUS_FILTER_COEFFICIENT_START_REGISTER;
  26   1        modbus_buffer_data = getModbusBufferData();
  27   1        
  28   1        for (i=0; i<1200; i++) {
  29   2          temp = coefficientIndex + i;
  30   2          hi = modbus_buffer_data [temp << 1];
  31   2          lo = modbus_buffer_data [(temp << 1) + 1];
  32   2          coefficients [i].u16 = (hi << 8) + lo;
  33   2        }
  34   1      }
*** WARNING C280 IN LINE 18 OF fir.c: 'order': unreferenced local variable
  35          
  36          int populateFirCoefficients(SI_UU16_t * coefficients, int number) {
  37   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  38   1        SI_SEGMENT_VARIABLE(order, int, xdata);
  39   1        SI_SEGMENT_VARIABLE(temp, int, xdata);
  40   1        SI_SEGMENT_VARIABLE(coefficientIndex, int, xdata);
  41   1        SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
  42   1        SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
  43   1        
  44   1        uint8_t * modbus_buffer_data;
  45   1        if (number > 11 || number < 0) {
  46   2          return 0;
  47   2        }
  48   1        coefficientIndex = MODBUS_FILTER_COEFFICIENT_START_REGISTER + FILTER_MAX_ORDER * number;
  49   1        modbus_buffer_data = getModbusBufferData();
  50   1        order = MODBUS_FILTER_ORDER_START_REGISTER;
  51   1        order = order + number;
  52   1        // reg number to byte number
  53   1        order = order << 1;
  54   1        // get filter order
C51 COMPILER V9.53.0.0   FIR                                                               04/18/2020 10:09:56 PAGE 2   

  55   1        order = modbus_buffer_data [order + 1];
  56   1        if (order > FILTER_MAX_ORDER) {
  57   2          order = FILTER_MAX_ORDER;
  58   2        }
  59   1        for (i = 0; i<order, i<FILTER_MAX_ORDER; i++) {
  60   2          temp = coefficientIndex + i;
  61   2          hi = modbus_buffer_data [temp << 1];
  62   2          lo = modbus_buffer_data [(temp << 1) + 1];
  63   2          coefficients [i].u16 = (hi << 8) + lo;
  64   2        }
  65   1        return order;
  66   1      }
  67          
  68          void putRms2Modbus(int value, int number) {
  69   1        uint8_t * modbus_buffer_data;
  70   1        SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
  71   1        SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
  72   1        SI_SEGMENT_VARIABLE(address, int, xdata);
  73   1        
  74   1        if (number > 11 || number < 0) {
  75   2          return;
  76   2        }
  77   1        address = MODBUS_FREQUENCY_VALUE_START + number;
  78   1        address = address << 1;
  79   1        hi = (value >> 8);
  80   1        lo = (value & 0xFF);
  81   1        modbus_buffer_data = getModbusBufferData();
  82   1        modbus_buffer_data [address] = hi;
  83   1        modbus_buffer_data [address + 1] = lo;
  84   1      }
  85          
  86          /*-----------------------------------------------------------------------------
  87          // RMS_Calc
  88          //-----------------------------------------------------------------------------
  89          //
  90          // Return Value : None
  91          // Parameters   :
  92          //   1) input_samples - pointer to an array of the data to be used for the RMS
  93          //                        Value calculations
  94          //   2) num_samples - the number of data elements in the <input_samples> array
  95          //
  96          // This routine takes a pointer to an array and a number of samples and first
  97          // computes the average value of the data.  Then, it uses this average to
  98          // calculate the RMS Value by using the following equation:
  99          //
 100          //                 N
 101          //                 __
 102          //                 \
 103          //                 /_  (x-x_avg)^2
 104          //                 n=10
 105          // RMS_Value^2 =  -----------------
 106          //                       N-10
 107          //
 108          //
 109          // The above routine skips the first <TAPS> samples where the filter hasn't quite
 110          // settled.
 111          //---------------------------------------------------------------------------*/
 112          int RMS_Calc (int *input_samples, int num_samples, int TAPS)
 113          {
 114   1         SI_SEGMENT_VARIABLE(count, int, xdata);
 115   1         SI_SEGMENT_VARIABLE(average, float, xdata);
 116   1         float RMS_summation = 0;
C51 COMPILER V9.53.0.0   FIR                                                               04/18/2020 10:09:56 PAGE 3   

 117   1         float RMS_Value;
 118   1         float temp;
 119   1      
 120   1      
 121   1         // Calculate the average value (x_avg) of the <input_samples> array
 122   1         average = 0.0;
 123   1      
 124   1         for (count = TAPS; count < num_samples; count++)
 125   1         {
 126   2            average += (float) input_samples[count];
 127   2         }
 128   1         average = (float)(average / (num_samples-TAPS));
 129   1      
 130   1         // Calculate the RMS Value using the average computed above
 131   1      
 132   1         // Calculate the sum from 1 to N of (x-x_avg)^2
 133   1         for (count = TAPS; count < num_samples; count++)
 134   1         {
 135   2            // calculate difference from mean
 136   2            temp = input_samples[count] - average;
 137   2            // square it
 138   2            temp *= temp;
 139   2            // and add it to sum
 140   2            RMS_summation += temp;
 141   2         }
 142   1      
 143   1         // Calculate sum from above / N
 144   1         RMS_summation = (float)RMS_summation / (num_samples-TAPS);
 145   1      
 146   1      #if defined __C51__
 147   1         RMS_Value = sqrt(RMS_summation);
 148   1      #elif defined SDCC
                 RMS_Value = sqrtf(RMS_summation);
              #endif
 151   1      
 152   1         return (int)RMS_Value;
 153   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1061    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      34
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
