C51 COMPILER V9.53.0.0   MODBUS                                                            05/05/2020 21:25:38 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN modbus.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE modbus.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <stdio.h>
   2          #include "si_toolchain.h"
   3          #include "C8051F120_defs.h"
   4          
   5          #include "modbus.h"
   6          #include "F120_FlashUtils.h"
   7          
   8          int modbus_receiver_pointer = 0;
   9          int modbus_transmitter_pointer_right = 0;
  10          int modbus_transmitter_pointer_left = 0;
  11          int sender_pause_timer = 0;
  12          
  13          
  14          
  15          SI_SEGMENT_VARIABLE(modbus_command_receiver[MODBUS_RECEIVER_LENGTH], uint8_t, xdata);
  16          SI_SEGMENT_VARIABLE(modbus_command_transmitter[MODBUS_TRANSMITTER_LENGTH], uint8_t, xdata);
  17          SI_SEGMENT_VARIABLE(modbus_buffer_data[MODBUS_DATA_LENGTH], uint8_t, xdata);
  18          SI_SEGMENT_VARIABLE(modbus_error_response[5], uint8_t, xdata);
  19          void (*init_after_flash_reload_func_pointer)(void);
  20          
  21          #pragma NOAREGS
  22          uint8_t * getModbusBufferData() {
  23   1        return modbus_buffer_data;
  24   1      }
  25          
  26          #pragma NOAREGS
  27          void restore_fir() {
  28   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
  29   1        SFRPAGE_save = SFRPAGE;
  30   1        SFRPAGE = TMR4_PAGE;
  31   1        TR4 = 1;
  32   1        SFRPAGE = UART0_PAGE;
  33   1        AD0EN = 1;
  34   1        SFRPAGE = SFRPAGE_save;
  35   1      }
  36          
  37          #pragma NOAREGS
  38          void modbus_init_from_flash(void (*init_after_flash_reload)(void)) {
  39   1        FLASH_Read (modbus_buffer_data, MODBUS_FLASH_ADDRESS, 3000, 0);
  40   1        init_after_flash_reload_func_pointer = init_after_flash_reload;
  41   1        init_after_flash_reload_func_pointer();
  42   1      }
  43          
  44          #pragma NOAREGS
  45          void resetFlashUpdate() {
  46   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_0] = 0;
  47   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_1] = 0; 
  48   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_2] = 0;
  49   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_3] = 0; 
  50   1      }
  51          
  52          #pragma NOAREGS
  53          bool isNeedFlashUpdate() {
  54   1        return
  55   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_0] == 0x11 &&
C51 COMPILER V9.53.0.0   MODBUS                                                            05/05/2020 21:25:38 PAGE 2   

  56   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_1] == 0x11 &&
  57   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_2] == 0x22 &&
  58   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_3] == 0x22;
  59   1      }
  60          
  61          #pragma NOAREGS
  62          uint16_t crc16_update(uint16_t crc, uint8_t a) {
  63   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  64   1        crc ^= (uint16_t)a;
  65   1        for (i = 0; i < 8; ++i) {
  66   2          if (crc & 1)
  67   2            crc = (crc >> 1) ^ 0xA001;
  68   2          else
  69   2            crc = (crc >> 1);
  70   2        }
  71   1        return crc;
  72   1      }
  73          
  74          #pragma NOAREGS
  75          uint16_t calc_crc(uint8_t * command, int size_command) {
  76   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
  77   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  78   1        crc = 0xFFFF;
  79   1        i = 0;
  80   1        for(i=0; i<size_command; i++) {
  81   2          crc = crc16_update(crc, (uint8_t) command [i]);
  82   2        }
  83   1        return crc;
  84   1      }
  85          
  86          #pragma NOAREGS
  87          bool modbus_check_crc(uint8_t * command_receiver, int receiver_pointer) {
  88   1        if(receiver_pointer > 2) {
  89   2          uint16_t crc_calc = calc_crc(command_receiver, receiver_pointer - 2);
  90   2          uint16_t crc = command_receiver [receiver_pointer - 1];
  91   2          crc = (crc << 8) + command_receiver [receiver_pointer - 2];
  92   2          return crc_calc == crc;
  93   2        }
  94   1        return false;
  95   1      }
  96          
  97          #pragma NOAREGS
  98          uint8_t modbus_get_address() {
  99   1        return modbus_buffer_data [MODBUS_ADDRESS_IN_MEMORY];
 100   1      }
 101          
 102          #pragma NOAREGS
 103          bool modbus_check_address() {
 104   1        return modbus_get_address() == modbus_command_receiver [MODBUS_ADDRESS]
 105   1          || modbus_command_receiver [MODBUS_ADDRESS] == MODBUS_BROADCAST_ADDRESS;
 106   1      }
 107          
 108          #pragma NOAREGS
 109          uint8_t modbus_get_function() {
 110   1        return modbus_command_receiver [MODBUS_FUNCTION];
 111   1      }
 112          
 113          #pragma NOAREGS
 114          void modbus_response_error(uint8_t error) {
 115   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 116   1        SI_SEGMENT_VARIABLE(i, int, xdata);
 117   1        crc = 0xFFFF;
C51 COMPILER V9.53.0.0   MODBUS                                                            05/05/2020 21:25:38 PAGE 3   

 118   1        i = 0;
 119   1        modbus_error_response [MODBUS_ADDRESS] = modbus_get_address();
 120   1        modbus_error_response [MODBUS_ERROR] = MODBUS_ERROR_CODE;
 121   1        modbus_error_response [MODBUS_EXCEPTION] = error;
 122   1        crc = calc_crc(modbus_error_response, 3);
 123   1        modbus_error_response [3] = (uint8_t)(crc >> 8);
 124   1        modbus_error_response [4] = (uint8_t)(crc);
 125   1        for(i = 0; i<5; i++) {
 126   2          modbus_push_transmit_buffer(modbus_error_response [i]);
 127   2        }
 128   1      }
 129          
 130          #pragma NOAREGS
 131          int modbus_process_function_3() {
 132   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 133   1        SI_SEGMENT_VARIABLE(i, uint16_t, xdata);
 134   1        SI_SEGMENT_VARIABLE(register_hi, uint16_t, xdata);
 135   1        SI_SEGMENT_VARIABLE(register_lo, uint16_t, xdata);
 136   1        SI_SEGMENT_VARIABLE(modbus_data, uint8_t, xdata);
 137   1        SI_SEGMENT_VARIABLE(address_hi, uint16_t, xdata);
 138   1        SI_SEGMENT_VARIABLE(address_lo, uint16_t, xdata);
 139   1        SI_SEGMENT_VARIABLE(address, uint16_t, xdata);
 140   1        SI_SEGMENT_VARIABLE(registers_hi, uint16_t, xdata);
 141   1        SI_SEGMENT_VARIABLE(registers_lo, uint16_t, xdata);
 142   1        SI_SEGMENT_VARIABLE(registers, uint16_t, xdata);
 143   1        SI_SEGMENT_VARIABLE(number, uint8_t, xdata);
 144   1        crc = 0xFFFF;
 145   1      
 146   1        address_hi = modbus_command_receiver [MODBUS_FIRST_REGISTER_HI];
 147   1        address_lo = modbus_command_receiver [MODBUS_FIRST_REGISTER_LO];
 148   1        address = (address_hi << 8) + address_lo;
 149   1        registers_hi = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_READ_HI];
 150   1        registers_lo = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_READ_LO];
 151   1        registers = (registers_hi << 8) + registers_lo;
 152   1        number = registers << 1;
 153   1        if((address << 1) + number >= MODBUS_DATA_LENGTH) {
 154   2          modbus_response_error(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
 155   2          return MODBUS_FAIL;
 156   2        }
 157   1        else {
 158   2          modbus_data = modbus_get_address();
 159   2          crc = crc16_update(crc, modbus_data);
 160   2          modbus_push_transmit_buffer(modbus_data);
 161   2          
 162   2          modbus_data = 3;
 163   2          crc = crc16_update(crc, modbus_data);
 164   2          modbus_push_transmit_buffer(modbus_data);
 165   2          
 166   2          modbus_data = number;
 167   2          crc = crc16_update(crc, modbus_data);
 168   2          modbus_push_transmit_buffer(modbus_data);
 169   2          
 170   2          for(i=0; i<registers; i++) {
 171   3            register_lo = modbus_buffer_data [(address << 1) + (i << 1)];
 172   3            register_hi = modbus_buffer_data [(address << 1) + (i << 1) + 1];
 173   3            modbus_data = register_lo;
 174   3            crc = crc16_update(crc, modbus_data);
 175   3            modbus_push_transmit_buffer(modbus_data);
 176   3            modbus_data = register_hi;
 177   3            crc = crc16_update(crc, modbus_data);
 178   3            modbus_push_transmit_buffer(modbus_data);
 179   3          }
C51 COMPILER V9.53.0.0   MODBUS                                                            05/05/2020 21:25:38 PAGE 4   

 180   2          modbus_push_transmit_buffer((uint8_t)(crc));
 181   2          modbus_push_transmit_buffer((uint8_t)(crc >> 8));
 182   2          TI0 = 1;
 183   2          return MODBUS_GOOD;
 184   2          //AD0EN = 1;
 185   2        }
 186   1      }
 187          
 188          #pragma NOAREGS
 189          bool modbus_check_size_of_func16(int registers_num) {
 190   1        return modbus_receiver_pointer == (MODBUS_FUNCTION_16_BASE_LENGTH + (registers_num << 1));
 191   1      }
 192          
 193          #pragma NOAREGS
 194          int modbus_process_function_16() {
 195   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 196   1        SI_SEGMENT_VARIABLE(i, uint16_t, xdata);
 197   1        SI_SEGMENT_VARIABLE(p, uint16_t, xdata);
 198   1        SI_SEGMENT_VARIABLE(register_hi, uint16_t, xdata);
 199   1        SI_SEGMENT_VARIABLE(register_lo, uint16_t, xdata);
 200   1        SI_SEGMENT_VARIABLE(register_in_hi, uint8_t, xdata);
 201   1        SI_SEGMENT_VARIABLE(register_in_lo, uint8_t, xdata);
 202   1        SI_SEGMENT_VARIABLE(modbus_data, uint8_t, xdata);
 203   1        SI_SEGMENT_VARIABLE(address_hi, uint8_t, xdata);
 204   1        SI_SEGMENT_VARIABLE(address_lo, uint8_t, xdata);
 205   1        SI_SEGMENT_VARIABLE(address, uint16_t, xdata);
 206   1        SI_SEGMENT_VARIABLE(registers_hi, uint8_t, xdata);
 207   1        SI_SEGMENT_VARIABLE(registers_lo, uint8_t, xdata);
 208   1        SI_SEGMENT_VARIABLE(registers, uint16_t, xdata);
 209   1        SI_SEGMENT_VARIABLE(number, uint16_t, xdata);
 210   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
 211   1        
 212   1        SFRPAGE_save = SFRPAGE;
 213   1        crc = 0xFFFF;
 214   1        
 215   1        address_hi = modbus_command_receiver [MODBUS_FIRST_REGISTER_HI];
 216   1        address_lo = modbus_command_receiver [MODBUS_FIRST_REGISTER_LO];
 217   1        address = (address_hi << 8) + address_lo;
 218   1        registers_hi = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_WRITE_HI];
 219   1        registers_lo = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_WRITE_LO];
 220   1        registers = (registers_hi << 8) + registers_lo;
 221   1        number = registers << 1;
 222   1        if(((address << 1) + number >= MODBUS_DATA_LENGTH) || !modbus_check_size_of_func16(registers)) {
 223   2          modbus_response_error(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
 224   2          return MODBUS_FAIL;
 225   2        }
 226   1        else {
 227   2          resetFlashUpdate();
 228   2          for(i=0; i<registers; i++) {
 229   3            register_in_hi = modbus_command_receiver [(i << 1) + MODBUS_WRITE_REGISTER_OFFSET];
 230   3            register_in_lo = modbus_command_receiver [(i << 1) + 1 + MODBUS_WRITE_REGISTER_OFFSET];
 231   3            register_hi = (address << 1) + (i << 1);
 232   3            register_lo = (address << 1) + (i << 1) + 1;
 233   3            modbus_buffer_data [register_lo] = register_in_lo;
 234   3            modbus_buffer_data [register_hi] = register_in_hi;
 235   3          }
 236   2          modbus_data = modbus_get_address();
 237   2          crc = crc16_update(crc, modbus_data);
 238   2          modbus_push_transmit_buffer(modbus_data);
 239   2          
 240   2          modbus_data = 16;
 241   2          crc = crc16_update(crc, modbus_data);
C51 COMPILER V9.53.0.0   MODBUS                                                            05/05/2020 21:25:38 PAGE 5   

 242   2          modbus_push_transmit_buffer(modbus_data);
 243   2          
 244   2          modbus_data = address_hi;
 245   2          crc = crc16_update(crc, modbus_data);
 246   2          modbus_push_transmit_buffer(modbus_data);
 247   2          
 248   2          modbus_data = address_lo;
 249   2          crc = crc16_update(crc, modbus_data);
 250   2          modbus_push_transmit_buffer(modbus_data);
 251   2          
 252   2          modbus_data = registers_hi;
 253   2          crc = crc16_update(crc, modbus_data);
 254   2          modbus_push_transmit_buffer(modbus_data);
 255   2          
 256   2          modbus_data = registers_lo;
 257   2          crc = crc16_update(crc, modbus_data);
 258   2          modbus_push_transmit_buffer(modbus_data);
 259   2          
 260   2          modbus_push_transmit_buffer((uint8_t)(crc));
 261   2          modbus_push_transmit_buffer((uint8_t)(crc >> 8));
 262   2          
 263   2          if (isNeedFlashUpdate()) {
 264   3            for (p=0; p<4; p++) {
 265   4              // 4 - pages (one page size is 1024)
 266   4              FLASH_Update(MODBUS_FLASH_ADDRESS + p * 1024, modbus_buffer_data + p * 1024, 1024, 0);
 267   4            }
 268   3          }
 269   2          TI0 = 1;
 270   2          return MODBUS_GOOD;
 271   2          //AD0EN = 1;
 272   2        }
 273   1      }
 274          
 275          #pragma NOAREGS
 276          void modbus_command_received() {
 277   1        SI_SEGMENT_VARIABLE(modbus_result, char, xdata);
 278   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
 279   1        
 280   1        modbus_result = MODBUS_FAIL;
 281   1        SFRPAGE_save = SFRPAGE;
 282   1        
 283   1        if(modbus_check_crc(modbus_command_receiver, modbus_receiver_pointer) && modbus_check_address()) {
 284   2          uint8_t function = modbus_get_function();
 285   2          if(function == 3 || function == 16) {
 286   3            if(function ==3) {
 287   4              modbus_result = modbus_process_function_3();
 288   4            }
 289   3            else {
 290   4              modbus_result = modbus_process_function_16();
 291   4            }
 292   3            if (modbus_receiver_pointer < 0xFF) {
 293   4              restore_fir();
 294   4            }
 295   3          }
 296   2          else {
 297   3            modbus_response_error(MODBUS_ERROR_ILLEGAL_FUNCTION_CODE);
 298   3          }
 299   2          //modbus_receiver_pointer = 0;
 300   2        }
 301   1        sender_pause_timer = 0;
 302   1        modbus_receiver_pointer = 0;
 303   1        if (modbus_result == MODBUS_FAIL) {
C51 COMPILER V9.53.0.0   MODBUS                                                            05/05/2020 21:25:38 PAGE 6   

 304   2          restore_fir();
 305   2        } else {
 306   2          init_after_flash_reload_func_pointer();
 307   2        }
 308   1      }
 309          
 310          #pragma NOAREGS
 311          int get_modbus_receiver_counter() {
 312   1        return sender_pause_timer;
 313   1      }
 314          
 315          #pragma NOAREGS
 316          void set_modbus_receiver_counter(int mrc) {
 317   1        sender_pause_timer = mrc;
 318   1      }
 319          
 320          #pragma NOAREGS
 321          void inc_modbus_receiver_counter() {
 322   1        sender_pause_timer++;
 323   1      }
 324          
 325          #pragma NOAREGS
 326          void modbus_byte_receive(uint8_t input) {
 327   1        sender_pause_timer = 0;
 328   1        modbus_command_receiver [modbus_receiver_pointer++] = input;
 329   1        if(modbus_receiver_pointer == MODBUS_RECEIVER_LENGTH) {
 330   2          modbus_receiver_pointer = 0;
 331   2        }
 332   1      }
 333          
 334          #pragma NOAREGS
 335          void modbus_transmit_byte() {
 336   1        if(modbus_transmitter_pointer_right > 0) {
 337   2          SBUF0 = modbus_command_transmitter [modbus_transmitter_pointer_left++];
 338   2          if (modbus_transmitter_pointer_left == MODBUS_TRANSMITTER_LENGTH) {
 339   3            modbus_transmitter_pointer_left = 0;
 340   3          }
 341   2        }
 342   1        if(modbus_transmitter_pointer_right == modbus_transmitter_pointer_left) {
 343   2          modbus_transmitter_pointer_right = 0;
 344   2          modbus_transmitter_pointer_left = 0;
 345   2        }
 346   1      }
 347          
 348          #pragma NOAREGS
 349          void modbus_push_transmit_buffer(uint8_t output) {
 350   1         /*
 351   1         if(output == '\n') {
 352   1           modbus_command_transmitter[modbus_transmitter_pointer_right++] = 0x0d;
 353   1         }
 354   1         else {
 355   1           modbus_command_transmitter[modbus_transmitter_pointer_right++] = output;
 356   1         }
 357   1         */
 358   1         modbus_command_transmitter[modbus_transmitter_pointer_right++] = output;
 359   1         if(modbus_transmitter_pointer_right == MODBUS_TRANSMITTER_LENGTH) {
 360   2              modbus_transmitter_pointer_right = 0;
 361   2         }
 362   1      }
 363          
 364          #pragma NOAREGS
 365          bool modbus_was_sendind_received() {
C51 COMPILER V9.53.0.0   MODBUS                                                            05/05/2020 21:25:38 PAGE 7   

 366   1        sender_pause_timer++;
 367   1        return (sender_pause_timer > 6 && modbus_receiver_pointer > 0);
 368   1      }
 369          
 370          #pragma NOAREGS
 371          bool modbus_transmit_buffer_is_empty() {
 372   1        return modbus_transmitter_pointer_right == 0;
 373   1      }
 374          
 375          #pragma NOAREGS
 376          unsigned char modbus_get_freq_divider() {
 377   1        return modbus_buffer_data [MODBUS_FREQ_DIVIDER_ADDRESS];
 378   1      }
 379          
 380          #pragma NOAREGS
 381          void modbus_init_freqs(unsigned long * freqs) {
 382   1         SI_SEGMENT_VARIABLE(i, char, xdata);
 383   1         SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
 384   1         SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
 385   1         SI_SEGMENT_VARIABLE(address, unsigned short int, xdata);
 386   1         address = MODBUS_FREQ_VALUES_START_ADDRESS;
 387   1         for (i=0; i<12; i++) {
 388   2            hi = modbus_buffer_data [address];
 389   2            lo = modbus_buffer_data [address + 1];
 390   2            freqs [i] = (hi << 8) + lo;
 391   2            address += 2;
 392   2         }
 393   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2076    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   5053      64
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
