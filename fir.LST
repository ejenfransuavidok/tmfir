C51 COMPILER V9.53.0.0   FIR                                                               05/07/2020 07:38:28 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FIR
OBJECT MODULE PLACED IN fir.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE fir.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "fir.h"
   2          
   3          #pragma NOAREGS
   4          int getFreqFromModbusForDAC(int number) {
   5   1        uint8_t hi;
   6   1        uint8_t lo;
   7   1        uint8_t * modbus_buffer_data;
   8   1        
   9   1        modbus_buffer_data = getModbusBufferData();
  10   1        
  11   1        hi = modbus_buffer_data[((MODBUS_OUTPUT_FREQ_FLAG_REGISTER_OFFSET + number) << 1)];
  12   1        lo = modbus_buffer_data[(((MODBUS_OUTPUT_FREQ_FLAG_REGISTER_OFFSET + number) << 1) + 1)];
  13   1        
  14   1        return ((hi << 8) + lo);
  15   1      }
  16          
  17          #pragma NOAREGS
  18          uint8_t populateFirCoefficients(SI_UU16_t * coefficients, int number) {
  19   1        SI_SEGMENT_VARIABLE(i, uint8_t, xdata);
  20   1        SI_SEGMENT_VARIABLE(order, uint16_t, xdata);
  21   1        SI_SEGMENT_VARIABLE(result, uint8_t, xdata);
  22   1        SI_SEGMENT_VARIABLE(temp, uint16_t, xdata);
  23   1        SI_SEGMENT_VARIABLE(coefficientIndex, uint16_t, xdata);
  24   1        SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
  25   1        SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
  26   1        
  27   1        uint8_t * modbus_buffer_data;
  28   1        if (number > 11 || number < 0) {
  29   2          return 0;
  30   2        }
  31   1        coefficientIndex = MODBUS_FILTER_COEFFICIENT_START_REGISTER + FILTER_MAX_ORDER_IN_MODBUS * number;
  32   1        modbus_buffer_data = getModbusBufferData();
  33   1        order = MODBUS_FILTER_ORDER_START_REGISTER;
  34   1        order = order + number;
  35   1        // reg number to byte number
  36   1        order = order << 1;
  37   1        // get filter order
  38   1        result = modbus_buffer_data [order + 1];
  39   1        if (result != 61) {
  40   2          result = 0;
  41   2        }
  42   1        for (i = 0; i<result; i++) {
  43   2          temp = coefficientIndex + i;
  44   2          hi = modbus_buffer_data [temp << 1];
  45   2          lo = modbus_buffer_data [(temp << 1) + 1];
  46   2          coefficients [i].u16 = (hi << 8) + lo;
  47   2        }
  48   1        if (result != 61) {
  49   2          NOP();
  50   2        }
  51   1        return result;
  52   1      }
  53          
  54          
  55          #pragma NOAREGS
C51 COMPILER V9.53.0.0   FIR                                                               05/07/2020 07:38:28 PAGE 2   

  56          void putRms2Modbus(int value, int number) {
  57   1        uint8_t * modbus_buffer_data;
  58   1        SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
  59   1        SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
  60   1        SI_SEGMENT_VARIABLE(address, unsigned int, xdata);
  61   1        SI_SEGMENT_VARIABLE(amplitude_reference, unsigned int, xdata);
  62   1        SI_SEGMENT_VARIABLE(flag, uint8_t, xdata);
  63   1        
  64   1        if (number > 11 || number < 0) {
  65   2          return;
  66   2        }
  67   1        //---------------------- PUT FIR RESULT TO MODBUS ----------------------
  68   1        address = MODBUS_FREQUENCY_AMPLITUDES_VALUE_START + number;
  69   1        address = address << 1;
  70   1        hi = (value >> 8);
  71   1        lo = (value & 0xFF);
  72   1        modbus_buffer_data = getModbusBufferData();
  73   1        modbus_buffer_data [address] = hi;
  74   1        modbus_buffer_data [address + 1] = lo;
  75   1        //---------------------- READ REFERENCE FROM MODBUS ----------------------
  76   1        address = MODBUS_AMPLITUDES_THREASHOLS_VALUE_START + number;
  77   1        address = address << 1;
  78   1        hi = modbus_buffer_data [address];
  79   1        lo = modbus_buffer_data [address + 1];
  80   1        amplitude_reference = (hi << 8) + lo;
  81   1        //---------------------- COMPARE FIR RESULT AND REFEREBCE ----------------------
  82   1        if (value > amplitude_reference) {
  83   2           flag = 1;
  84   2        } else {
  85   2           flag = 0;
  86   2        }
  87   1        //---------------------- PUT COMPARATIVE TO MODBUS LIKE A FLAG ----------------------
  88   1        address = MODBUS_FREQUENCY_VALUE_START + number;
  89   1        address = address << 1;
  90   1        modbus_buffer_data [address] = 0;
  91   1        modbus_buffer_data [address + 1] = flag;
  92   1      }
  93          
  94          /*-----------------------------------------------------------------------------
  95          // RMS_Calc
  96          //-----------------------------------------------------------------------------
  97          //
  98          // Return Value : None
  99          // Parameters   :
 100          //   1) input_samples - pointer to an array of the data to be used for the RMS
 101          //                        Value calculations
 102          //   2) num_samples - the number of data elements in the <input_samples> array
 103          //
 104          // This routine takes a pointer to an array and a number of samples and first
 105          // computes the average value of the data.  Then, it uses this average to
 106          // calculate the RMS Value by using the following equation:
 107          //
 108          //                 N
 109          //                 __
 110          //                 \
 111          //                 /_  (x-x_avg)^2
 112          //                 n=10
 113          // RMS_Value^2 =  -----------------
 114          //                       N-10
 115          //
 116          //
 117          // The above routine skips the first <TAPS> samples where the filter hasn't quite
C51 COMPILER V9.53.0.0   FIR                                                               05/07/2020 07:38:28 PAGE 3   

 118          // settled.
 119          //---------------------------------------------------------------------------*/
 120          #pragma NOAREGS
 121          int RMS_Calc (int *input_samples, int num_samples, int TAPS)
 122          {
 123   1         int count = 0;
 124   1         float average = 0;
 125   1         float RMS_summation = 0;
 126   1         float RMS_Value;
 127   1         float temp;
 128   1        
 129   1         // Calculate the average value (x_avg) of the <input_samples> array
 130   1         average = 0.0;
 131   1      
 132   1         for (count = TAPS; count < num_samples; count++)
 133   1         {
 134   2            average += (float) input_samples[count];
 135   2         }
 136   1         average = (float)(average / (num_samples-TAPS));
 137   1      
 138   1         // Calculate the RMS Value using the average computed above
 139   1         // Calculate the sum from 1 to N of (x-x_avg)^2
 140   1         for (count = TAPS; count < num_samples; count++)
 141   1         {
 142   2            // calculate difference from mean
 143   2            temp = input_samples[count] - average;
 144   2            // square it
 145   2            temp *= temp;
 146   2            // and add it to sum
 147   2            RMS_summation += temp;
 148   2         }
 149   1         // Calculate sum from above / N
 150   1         RMS_summation = (float)RMS_summation / (num_samples-TAPS);
 151   1      #if defined __C51__
 152   1         RMS_Value = sqrt(RMS_summation);
 153   1      #elif defined SDCC
                 RMS_Value = sqrtf(RMS_summation);
              #endif
 156   1         return (int)RMS_Value;
 157   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1015    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      38
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
