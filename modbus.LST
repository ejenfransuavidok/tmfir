C51 COMPILER V9.53.0.0   MODBUS                                                            04/18/2020 10:09:52 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN modbus.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE modbus.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <stdio.h>
   2          #include "si_toolchain.h"
   3          #include "C8051F120_defs.h"
   4          
   5          #include "modbus.h"
   6          #include "F120_FlashUtils.h"
   7          
   8          int modbus_receiver_pointer = 0;
   9          int modbus_transmitter_pointer_right = 0;
  10          int modbus_transmitter_pointer_left = 0;
  11          int sender_pause_timer = 0;
  12          SI_SEGMENT_VARIABLE(modbus_command_receiver[MODBUS_RECEIVER_LENGTH], uint8_t, xdata);
  13          SI_SEGMENT_VARIABLE(modbus_command_transmitter[MODBUS_TRANSMITTER_LENGTH], uint8_t, xdata);
  14          SI_SEGMENT_VARIABLE(modbus_buffer_data[MODBUS_DATA_LENGTH], uint8_t, xdata);
  15          SI_SEGMENT_VARIABLE(modbus_error_response[5], uint8_t, xdata);
  16          //SI_SEGMENT_VARIABLE(modbus_flash[4096], uint8_t, code);
  17          
  18          uint8_t * getModbusBufferData() {
  19   1        return modbus_buffer_data;
  20   1      }
  21          
  22          void restore_fir() {
  23   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
  24   1        SFRPAGE_save = SFRPAGE;
  25   1        SFRPAGE = TMR4_PAGE;
  26   1        TR4 = 1;
  27   1        SFRPAGE = UART0_PAGE;
  28   1        AD0EN = 1;
  29   1        SFRPAGE = SFRPAGE_save;
  30   1      }
  31          
  32          void modbus_init_from_flash() {
  33   1        FLASH_Read (modbus_buffer_data, MODBUS_FLASH_ADDRESS, 3000, 0);
  34   1      }
  35          
  36          void resetFlashUpdate() {
  37   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_0] = 0;
  38   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_1] = 0; 
  39   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_2] = 0;
  40   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_3] = 0; 
  41   1      }
  42          
  43          bool isNeedFlashUpdate() {
  44   1        return
  45   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_0] == 0x11 &&
  46   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_1] == 0x11 &&
  47   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_2] == 0x22 &&
  48   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_3] == 0x22;
  49   1      }
  50          
  51          uint16_t crc16_update(uint16_t crc, uint8_t a) {
  52   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  53   1        crc ^= (uint16_t)a;
  54   1        for (i = 0; i < 8; ++i) {
  55   2          if (crc & 1)
C51 COMPILER V9.53.0.0   MODBUS                                                            04/18/2020 10:09:52 PAGE 2   

  56   2            crc = (crc >> 1) ^ 0xA001;
  57   2          else
  58   2            crc = (crc >> 1);
  59   2        }
  60   1        return crc;
  61   1      }
  62          
  63          uint16_t calc_crc(uint8_t * command, int size_command) {
  64   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
  65   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  66   1        crc = 0xFFFF;
  67   1        i = 0;
  68   1        for(i=0; i<size_command; i++) {
  69   2          crc = crc16_update(crc, (uint8_t) command [i]);
  70   2        }
  71   1        return crc;
  72   1      }
  73          
  74          bool modbus_check_crc(uint8_t * command_receiver, int receiver_pointer) {
  75   1        if(receiver_pointer > 2) {
  76   2          uint16_t crc_calc = calc_crc(command_receiver, receiver_pointer - 2);
  77   2          uint16_t crc = command_receiver [receiver_pointer - 1];
  78   2          crc = (crc << 8) + command_receiver [receiver_pointer - 2];
  79   2          return crc_calc == crc;
  80   2        }
  81   1        return false;
  82   1      }
  83          
  84          uint8_t modbus_get_address() {
  85   1        return modbus_buffer_data [MODBUS_ADDRESS_IN_MEMORY];
  86   1      }
  87          
  88          bool modbus_check_address() {
  89   1        return modbus_get_address() == modbus_command_receiver [MODBUS_ADDRESS]
  90   1          || modbus_command_receiver [MODBUS_ADDRESS] == MODBUS_BROADCAST_ADDRESS;
  91   1      }
  92          
  93          uint8_t modbus_get_function() {
  94   1        return modbus_command_receiver [MODBUS_FUNCTION];
  95   1      }
  96          
  97          void modbus_response_error(uint8_t error) {
  98   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
  99   1        SI_SEGMENT_VARIABLE(i, int, xdata);
 100   1        crc = 0xFFFF;
 101   1        i = 0;
 102   1        modbus_error_response [MODBUS_ADDRESS] = modbus_get_address();
 103   1        modbus_error_response [MODBUS_ERROR] = MODBUS_ERROR_CODE;
 104   1        modbus_error_response [MODBUS_EXCEPTION] = error;
 105   1        crc = calc_crc(modbus_error_response, 3);
 106   1        modbus_error_response [3] = (uint8_t)(crc >> 8);
 107   1        modbus_error_response [4] = (uint8_t)(crc);
 108   1        for(i = 0; i<5; i++) {
 109   2          modbus_push_transmit_buffer(modbus_error_response [i]);
 110   2        }
 111   1      }
 112          
 113          int modbus_process_function_3() {
 114   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 115   1        SI_SEGMENT_VARIABLE(i, uint16_t, xdata);
 116   1        SI_SEGMENT_VARIABLE(register_hi, uint16_t, xdata);
 117   1        SI_SEGMENT_VARIABLE(register_lo, uint16_t, xdata);
C51 COMPILER V9.53.0.0   MODBUS                                                            04/18/2020 10:09:52 PAGE 3   

 118   1        SI_SEGMENT_VARIABLE(modbus_data, uint8_t, xdata);
 119   1        SI_SEGMENT_VARIABLE(address_hi, uint16_t, xdata);
 120   1        SI_SEGMENT_VARIABLE(address_lo, uint16_t, xdata);
 121   1        SI_SEGMENT_VARIABLE(address, uint16_t, xdata);
 122   1        SI_SEGMENT_VARIABLE(registers_hi, uint16_t, xdata);
 123   1        SI_SEGMENT_VARIABLE(registers_lo, uint16_t, xdata);
 124   1        SI_SEGMENT_VARIABLE(registers, uint16_t, xdata);
 125   1        SI_SEGMENT_VARIABLE(number, uint8_t, xdata);
 126   1        crc = 0xFFFF;
 127   1      
 128   1        address_hi = modbus_command_receiver [MODBUS_FIRST_REGISTER_HI];
 129   1        address_lo = modbus_command_receiver [MODBUS_FIRST_REGISTER_LO];
 130   1        address = (address_hi << 8) + address_lo;
 131   1        registers_hi = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_READ_HI];
 132   1        registers_lo = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_READ_LO];
 133   1        registers = (registers_hi << 8) + registers_lo;
 134   1        number = registers << 1;
 135   1        if((address << 1) + number >= MODBUS_DATA_LENGTH) {
 136   2          modbus_response_error(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
 137   2          return MODBUS_FAIL;
 138   2        }
 139   1        else {
 140   2          modbus_data = modbus_get_address();
 141   2          crc = crc16_update(crc, modbus_data);
 142   2          modbus_push_transmit_buffer(modbus_data);
 143   2          
 144   2          modbus_data = 3;
 145   2          crc = crc16_update(crc, modbus_data);
 146   2          modbus_push_transmit_buffer(modbus_data);
 147   2          
 148   2          modbus_data = number;
 149   2          crc = crc16_update(crc, modbus_data);
 150   2          modbus_push_transmit_buffer(modbus_data);
 151   2          
 152   2          for(i=0; i<registers; i++) {
 153   3            register_lo = modbus_buffer_data [(address << 1) + (i << 1)];
 154   3            register_hi = modbus_buffer_data [(address << 1) + (i << 1) + 1];
 155   3            modbus_data = register_lo;
 156   3            crc = crc16_update(crc, modbus_data);
 157   3            modbus_push_transmit_buffer(modbus_data);
 158   3            modbus_data = register_hi;
 159   3            crc = crc16_update(crc, modbus_data);
 160   3            modbus_push_transmit_buffer(modbus_data);
 161   3          }
 162   2          modbus_push_transmit_buffer((uint8_t)(crc >> 8));
 163   2          modbus_push_transmit_buffer((uint8_t)(crc));
 164   2          TI0 = 1;
 165   2          return MODBUS_GOOD;
 166   2          //AD0EN = 1;
 167   2        }
 168   1      }
 169          
 170          bool modbus_check_size_of_func16(int registers_num) {
 171   1        return modbus_receiver_pointer == (MODBUS_FUNCTION_16_BASE_LENGTH + (registers_num << 1));
 172   1      }
 173          
 174          int modbus_process_function_16() {
 175   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 176   1        SI_SEGMENT_VARIABLE(i, uint16_t, xdata);
 177   1        SI_SEGMENT_VARIABLE(p, uint16_t, xdata);
 178   1        SI_SEGMENT_VARIABLE(register_hi, uint16_t, xdata);
 179   1        SI_SEGMENT_VARIABLE(register_lo, uint16_t, xdata);
C51 COMPILER V9.53.0.0   MODBUS                                                            04/18/2020 10:09:52 PAGE 4   

 180   1        SI_SEGMENT_VARIABLE(register_in_hi, uint8_t, xdata);
 181   1        SI_SEGMENT_VARIABLE(register_in_lo, uint8_t, xdata);
 182   1        SI_SEGMENT_VARIABLE(modbus_data, uint8_t, xdata);
 183   1        SI_SEGMENT_VARIABLE(address_hi, uint8_t, xdata);
 184   1        SI_SEGMENT_VARIABLE(address_lo, uint8_t, xdata);
 185   1        SI_SEGMENT_VARIABLE(address, uint16_t, xdata);
 186   1        SI_SEGMENT_VARIABLE(registers_hi, uint8_t, xdata);
 187   1        SI_SEGMENT_VARIABLE(registers_lo, uint8_t, xdata);
 188   1        SI_SEGMENT_VARIABLE(registers, uint16_t, xdata);
 189   1        SI_SEGMENT_VARIABLE(number, uint16_t, xdata);
 190   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
 191   1        
 192   1        SFRPAGE_save = SFRPAGE;
 193   1        crc = 0xFFFF;
 194   1        
 195   1        address_hi = modbus_command_receiver [MODBUS_FIRST_REGISTER_HI];
 196   1        address_lo = modbus_command_receiver [MODBUS_FIRST_REGISTER_LO];
 197   1        address = (address_hi << 8) + address_lo;
 198   1        registers_hi = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_WRITE_HI];
 199   1        registers_lo = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_WRITE_LO];
 200   1        registers = (registers_hi << 8) + registers_lo;
 201   1        number = registers << 1;
 202   1        if(((address << 1) + number >= MODBUS_DATA_LENGTH) || !modbus_check_size_of_func16(registers)) {
 203   2          modbus_response_error(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
 204   2          return MODBUS_FAIL;
 205   2        }
 206   1        else {
 207   2          resetFlashUpdate();
 208   2          for(i=0; i<registers; i++) {
 209   3            register_in_hi = modbus_command_receiver [(i << 1) + MODBUS_WRITE_REGISTER_OFFSET];
 210   3            register_in_lo = modbus_command_receiver [(i << 1) + 1 + MODBUS_WRITE_REGISTER_OFFSET];
 211   3            register_hi = (address << 1) + (i << 1);
 212   3            register_lo = (address << 1) + (i << 1) + 1;
 213   3            modbus_buffer_data [register_lo] = register_in_lo;
 214   3            modbus_buffer_data [register_hi] = register_in_hi;
 215   3          }
 216   2          modbus_data = modbus_get_address();
 217   2          crc = crc16_update(crc, modbus_data);
 218   2          modbus_push_transmit_buffer(modbus_data);
 219   2          
 220   2          modbus_data = 16;
 221   2          crc = crc16_update(crc, modbus_data);
 222   2          modbus_push_transmit_buffer(modbus_data);
 223   2          
 224   2          modbus_data = address_hi;
 225   2          crc = crc16_update(crc, modbus_data);
 226   2          modbus_push_transmit_buffer(modbus_data);
 227   2          
 228   2          modbus_data = address_lo;
 229   2          crc = crc16_update(crc, modbus_data);
 230   2          modbus_push_transmit_buffer(modbus_data);
 231   2          
 232   2          modbus_data = registers_hi;
 233   2          crc = crc16_update(crc, modbus_data);
 234   2          modbus_push_transmit_buffer(modbus_data);
 235   2          
 236   2          modbus_data = registers_lo;
 237   2          crc = crc16_update(crc, modbus_data);
 238   2          modbus_push_transmit_buffer(modbus_data);
 239   2          
 240   2          modbus_push_transmit_buffer((uint8_t)(crc >> 8));
 241   2          modbus_push_transmit_buffer((uint8_t)(crc));
C51 COMPILER V9.53.0.0   MODBUS                                                            04/18/2020 10:09:52 PAGE 5   

 242   2          
 243   2          if (isNeedFlashUpdate()) {
 244   3            for (p=0; p<4; p++) {
 245   4              // 4 - pages (one page size is 1024)
 246   4              FLASH_Update(MODBUS_FLASH_ADDRESS + p * 1024, modbus_buffer_data + p * 1024, 1024, 0);
 247   4            }
 248   3          }
 249   2          TI0 = 1;
 250   2          return MODBUS_GOOD;
 251   2          //AD0EN = 1;
 252   2        }
 253   1      }
 254          
 255          bool modbus_command_received() {
 256   1        SI_SEGMENT_VARIABLE(modbus_result, char, xdata);
 257   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
 258   1        
 259   1        modbus_result = MODBUS_FAIL;
 260   1        SFRPAGE_save = SFRPAGE;
 261   1        
 262   1        if(modbus_check_crc(modbus_command_receiver, modbus_receiver_pointer) && modbus_check_address()) {
 263   2          uint8_t function = modbus_get_function();
 264   2          if(function == 3 || function == 16) {
 265   3            if(function ==3) {
 266   4              modbus_result = modbus_process_function_3();
 267   4            }
 268   3            else {
 269   4              modbus_result = modbus_process_function_16();
 270   4            }
 271   3            if (modbus_receiver_pointer < 0xFF) {
 272   4              restore_fir();
 273   4            }
 274   3          }
 275   2          else {
 276   3            modbus_response_error(MODBUS_ERROR_ILLEGAL_FUNCTION_CODE);
 277   3          }
 278   2          //modbus_receiver_pointer = 0;
 279   2        }
 280   1        sender_pause_timer = 0;
 281   1        modbus_receiver_pointer = 0;
 282   1        if (modbus_result == MODBUS_FAIL) {
 283   2          restore_fir();
 284   2        }
 285   1      }
*** WARNING C173 IN LINE 285 OF modbus.c: missing return-expression
 286          
 287          int get_modbus_receiver_counter() {
 288   1        return sender_pause_timer;
 289   1      }
 290          
 291          void set_modbus_receiver_counter(int mrc) {
 292   1        sender_pause_timer = mrc;
 293   1      }
 294          
 295          void inc_modbus_receiver_counter() {
 296   1        sender_pause_timer++;
 297   1      }
 298          
 299          void modbus_byte_receive(uint8_t input) {
 300   1        sender_pause_timer = 0;
 301   1        modbus_command_receiver [modbus_receiver_pointer++] = input;
 302   1        if(modbus_receiver_pointer == MODBUS_RECEIVER_LENGTH) {
C51 COMPILER V9.53.0.0   MODBUS                                                            04/18/2020 10:09:52 PAGE 6   

 303   2          modbus_receiver_pointer = 0;
 304   2        }
 305   1      }
 306          
 307          void modbus_transmit_byte() {
 308   1        if(modbus_transmitter_pointer_right > 0) {
 309   2          SBUF0 = modbus_command_transmitter [modbus_transmitter_pointer_left++];
 310   2          if (modbus_transmitter_pointer_left == MODBUS_TRANSMITTER_LENGTH) {
 311   3            modbus_transmitter_pointer_left = 0;
 312   3          }
 313   2        }
 314   1        if(modbus_transmitter_pointer_right == modbus_transmitter_pointer_left) {
 315   2          modbus_transmitter_pointer_right = 0;
 316   2          modbus_transmitter_pointer_left = 0;
 317   2        }
 318   1      }
 319          
 320          void modbus_push_transmit_buffer(uint8_t output) {
 321   1        if(output == '\n') {
 322   2           modbus_command_transmitter[modbus_transmitter_pointer_right++] = 0x0d;
 323   2           //TI0 = 1;
 324   2         }
 325   1         else {
 326   2           modbus_command_transmitter[modbus_transmitter_pointer_right++] = output;
 327   2           //TI0 = 1;
 328   2         }
 329   1         if(modbus_transmitter_pointer_right == MODBUS_TRANSMITTER_LENGTH) {
 330   2              modbus_transmitter_pointer_right = 0;
 331   2         }
 332   1      }
 333          
 334          bool modbus_was_sendind_received() {
 335   1        sender_pause_timer++;
 336   1        return (sender_pause_timer > 6 && modbus_receiver_pointer > 0);
 337   1      }
 338          
 339          bool modbus_transmit_buffer_is_empty() {
 340   1        return modbus_transmitter_pointer_right == 0;
 341   1      }
*** WARNING C290 IN LINE 285 OF modbus.c: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1899    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   5053      59
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
