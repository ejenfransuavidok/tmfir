C51 COMPILER V9.53.0.0   FIR                                                               04/26/2020 21:29:24 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FIR
OBJECT MODULE PLACED IN fir.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE fir.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "fir.h"
   2          
   3          int getFreqFromModbusForDAC(int number) {
   4   1        uint8_t hi;
   5   1        uint8_t lo;
   6   1        uint8_t * modbus_buffer_data;
   7   1        
   8   1        modbus_buffer_data = getModbusBufferData();
   9   1        
  10   1        hi = modbus_buffer_data[((MODBUS_OUTPUT_FREQ_FLAG_REGISTER_OFFSET + number) << 1)];
  11   1        lo = modbus_buffer_data[(((MODBUS_OUTPUT_FREQ_FLAG_REGISTER_OFFSET + number) << 1) + 1)];
  12   1        
  13   1        return ((hi << 8) + lo);
  14   1      }
  15          
  16          void populateFirAll(SI_UU16_t * coefficients) {
  17   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  18   1        SI_SEGMENT_VARIABLE(order, int, xdata);
  19   1        SI_SEGMENT_VARIABLE(temp, int, xdata);
  20   1        SI_SEGMENT_VARIABLE(coefficientIndex, int, xdata);
  21   1        SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
  22   1        SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
  23   1        
  24   1        uint8_t * modbus_buffer_data;
  25   1        coefficientIndex = MODBUS_FILTER_COEFFICIENT_START_REGISTER;
  26   1        modbus_buffer_data = getModbusBufferData();
  27   1        
  28   1        for (i=0; i<1200; i++) {
  29   2          temp = coefficientIndex + i;
  30   2          hi = modbus_buffer_data [temp << 1];
  31   2          lo = modbus_buffer_data [(temp << 1) + 1];
  32   2          coefficients [i].u16 = (hi << 8) + lo;
  33   2        }
  34   1      }
*** WARNING C280 IN LINE 18 OF fir.c: 'order': unreferenced local variable
  35          
  36          int populateFirCoefficients(SI_UU16_t * coefficients, int number) {
  37   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  38   1        SI_SEGMENT_VARIABLE(order, int, xdata);
  39   1        SI_SEGMENT_VARIABLE(temp, int, xdata);
  40   1        SI_SEGMENT_VARIABLE(coefficientIndex, int, xdata);
  41   1        SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
  42   1        SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
  43   1        
  44   1        uint8_t * modbus_buffer_data;
  45   1        if (number > 11 || number < 0) {
  46   2          return 0;
  47   2        }
  48   1        coefficientIndex = MODBUS_FILTER_COEFFICIENT_START_REGISTER + FILTER_MAX_ORDER * number;
  49   1        modbus_buffer_data = getModbusBufferData();
  50   1        order = MODBUS_FILTER_ORDER_START_REGISTER;
  51   1        order = order + number;
  52   1        // reg number to byte number
  53   1        order = order << 1;
  54   1        // get filter order
C51 COMPILER V9.53.0.0   FIR                                                               04/26/2020 21:29:24 PAGE 2   

  55   1        order = modbus_buffer_data [order + 1];
  56   1        if (order > FILTER_MAX_ORDER) {
  57   2          order = FILTER_MAX_ORDER;
  58   2        }
  59   1        for (i = 0; i<order, i<FILTER_MAX_ORDER; i++) {
  60   2          temp = coefficientIndex + i;
  61   2          hi = modbus_buffer_data [temp << 1];
  62   2          lo = modbus_buffer_data [(temp << 1) + 1];
  63   2          coefficients [i].u16 = (hi << 8) + lo;
  64   2        }
  65   1        return order;
  66   1      }
  67          
  68          void putRms2Modbus(int value, int number) {
  69   1        uint8_t * modbus_buffer_data;
  70   1        SI_SEGMENT_VARIABLE(hi, uint8_t, xdata);
  71   1        SI_SEGMENT_VARIABLE(lo, uint8_t, xdata);
  72   1        SI_SEGMENT_VARIABLE(address, int, xdata);
  73   1        SI_SEGMENT_VARIABLE(amplitude_reference, int, xdata);
  74   1        SI_SEGMENT_VARIABLE(flag, uint8_t, xdata);
  75   1        
  76   1        if (number > 11 || number < 0) {
  77   2          return;
  78   2        }
  79   1        //---------------------- PUT FIR RESULT TO MODBUS ----------------------
  80   1        address = MODBUS_FREQUENCY_AMPLITUDES_VALUE_START + number;
  81   1        address = address << 1;
  82   1        hi = (value >> 8);
  83   1        lo = (value & 0xFF);
  84   1        modbus_buffer_data = getModbusBufferData();
  85   1        modbus_buffer_data [address] = hi;
  86   1        modbus_buffer_data [address + 1] = lo;
  87   1        //---------------------- READ REFERENCE FROM MODBUS ----------------------
  88   1        address = MODBUS_AMPLITUDES_THREASHOLS_VALUE_START + number;
  89   1        address = address << 1;
  90   1        hi = modbus_buffer_data [address];
  91   1        lo = modbus_buffer_data [address + 1];
  92   1        amplitude_reference = (hi << 8) + lo;
  93   1        //---------------------- COMPARE FIR RESULT AND REFEREBCE ----------------------
  94   1        if (value > amplitude_reference) {
  95   2           flag = 1;
  96   2        } else {
  97   2           flag = 0;
  98   2        }
  99   1        //---------------------- PUT COMPARATIVE TO MODBUS LIKE A FLAG ----------------------
 100   1        address = MODBUS_FREQUENCY_VALUE_START + number;
 101   1        address = address << 1;
 102   1        modbus_buffer_data [address] = 0;
 103   1        modbus_buffer_data [address + 1] = flag;
 104   1      }
 105          
 106          /*-----------------------------------------------------------------------------
 107          // RMS_Calc
 108          //-----------------------------------------------------------------------------
 109          //
 110          // Return Value : None
 111          // Parameters   :
 112          //   1) input_samples - pointer to an array of the data to be used for the RMS
 113          //                        Value calculations
 114          //   2) num_samples - the number of data elements in the <input_samples> array
 115          //
 116          // This routine takes a pointer to an array and a number of samples and first
C51 COMPILER V9.53.0.0   FIR                                                               04/26/2020 21:29:24 PAGE 3   

 117          // computes the average value of the data.  Then, it uses this average to
 118          // calculate the RMS Value by using the following equation:
 119          //
 120          //                 N
 121          //                 __
 122          //                 \
 123          //                 /_  (x-x_avg)^2
 124          //                 n=10
 125          // RMS_Value^2 =  -----------------
 126          //                       N-10
 127          //
 128          //
 129          // The above routine skips the first <TAPS> samples where the filter hasn't quite
 130          // settled.
 131          //---------------------------------------------------------------------------*/
 132          int RMS_Calc (int *input_samples, int num_samples, int TAPS)
 133          {
 134   1         SI_SEGMENT_VARIABLE(count, int, xdata);
 135   1         SI_SEGMENT_VARIABLE(average, float, xdata);
 136   1         float RMS_summation = 0;
 137   1         float RMS_Value;
 138   1         float temp;
 139   1      
 140   1      
 141   1         // Calculate the average value (x_avg) of the <input_samples> array
 142   1         average = 0.0;
 143   1      
 144   1         for (count = TAPS; count < num_samples; count++)
 145   1         {
 146   2            average += (float) input_samples[count];
 147   2         }
 148   1         average = (float)(average / (num_samples-TAPS));
 149   1      
 150   1         // Calculate the RMS Value using the average computed above
 151   1      
 152   1         // Calculate the sum from 1 to N of (x-x_avg)^2
 153   1         for (count = TAPS; count < num_samples; count++)
 154   1         {
 155   2            // calculate difference from mean
 156   2            temp = input_samples[count] - average;
 157   2            // square it
 158   2            temp *= temp;
 159   2            // and add it to sum
 160   2            RMS_summation += temp;
 161   2         }
 162   1      
 163   1         // Calculate sum from above / N
 164   1         RMS_summation = (float)RMS_summation / (num_samples-TAPS);
 165   1      
 166   1      #if defined __C51__
 167   1         RMS_Value = sqrt(RMS_summation);
 168   1      #elif defined SDCC
                 RMS_Value = sqrtf(RMS_summation);
              #endif
 171   1      
 172   1         return (int)RMS_Value;
 173   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1232    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.53.0.0   FIR                                                               04/26/2020 21:29:24 PAGE 4   

   XDATA SIZE       =   ----      33
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      38
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
