C51 COMPILER V9.53.0.0   MODBUS                                                            04/01/2020 23:34:37 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN modbus.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE modbus.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <stdio.h>
   2          #include "si_toolchain.h"
   3          #include "C8051F120_defs.h"
   4          
   5          #include "modbus.h"
   6          #include "F120_FlashUtils.h"
   7          
   8          int modbus_receiver_pointer = 0;
   9          int modbus_transmitter_pointer_right = 0;
  10          int modbus_transmitter_pointer_left = 0;
  11          int sender_pause_timer = 0;
  12          SI_SEGMENT_VARIABLE(modbus_command_receiver[MODBUS_RECEIVER_LENGTH], uint8_t, xdata);
  13          SI_SEGMENT_VARIABLE(modbus_command_transmitter[MODBUS_TRANSMITTER_LENGTH], uint8_t, xdata);
  14          SI_SEGMENT_VARIABLE(modbus_buffer_data[MODBUS_DATA_LENGTH], uint8_t, xdata);
  15          SI_SEGMENT_VARIABLE(modbus_error_response[5], uint8_t, xdata);
  16          //SI_SEGMENT_VARIABLE(modbus_flash[4096], uint8_t, code);
  17          
  18          uint8_t * getModbusBufferData() {
  19   1        return modbus_buffer_data;
  20   1      }
  21          
  22          void modbus_init_from_flash() {
  23   1        FLASH_Read (modbus_buffer_data, MODBUS_FLASH_ADDRESS, 3000, 0);
  24   1      }
  25          
  26          void resetFlashUpdate() {
  27   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_0] = 0;
  28   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_1] = 0; 
  29   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_2] = 0;
  30   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_3] = 0; 
  31   1      }
  32          
  33          bool isNeedFlashUpdate() {
  34   1        return
  35   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_0] == 0x11 &&
  36   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_1] == 0x11 &&
  37   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_2] == 0x22 &&
  38   1        modbus_buffer_data [MODBUS_REFRESH_FLASH_MEMORY_ADDRESS_3] == 0x22;
  39   1      }
  40          
  41          uint16_t crc16_update(uint16_t crc, uint8_t a) {
  42   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  43   1        crc ^= (uint16_t)a;
  44   1        for (i = 0; i < 8; ++i) {
  45   2          if (crc & 1)
  46   2            crc = (crc >> 1) ^ 0xA001;
  47   2          else
  48   2            crc = (crc >> 1);
  49   2        }
  50   1        return crc;
  51   1      }
  52          
  53          uint16_t calc_crc(uint8_t * command, int size_command) {
  54   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
  55   1        SI_SEGMENT_VARIABLE(i, int, xdata);
C51 COMPILER V9.53.0.0   MODBUS                                                            04/01/2020 23:34:37 PAGE 2   

  56   1        crc = 0xFFFF;
  57   1        i = 0;
  58   1        for(i=0; i<size_command; i++) {
  59   2          crc = crc16_update(crc, (uint8_t) command [i]);
  60   2        }
  61   1        return crc;
  62   1      }
  63          
  64          bool modbus_check_crc(uint8_t * command_receiver, int receiver_pointer) {
  65   1        if(receiver_pointer > 2) {
  66   2          uint16_t crc_calc = calc_crc(command_receiver, receiver_pointer - 2);
  67   2          uint16_t crc = command_receiver [receiver_pointer - 2];
  68   2          crc = (crc << 8) + command_receiver [receiver_pointer - 1];
  69   2          return crc_calc == crc;
  70   2        }
  71   1        return false;
  72   1      }
  73          
  74          uint8_t modbus_get_address() {
  75   1        return modbus_buffer_data [MODBUS_ADDRESS_IN_MEMORY];
  76   1      }
  77          
  78          bool modbus_check_address() {
  79   1        return modbus_get_address() == modbus_command_receiver [MODBUS_ADDRESS]
  80   1          || modbus_command_receiver [MODBUS_ADDRESS] == MODBUS_BROADCAST_ADDRESS;
  81   1      }
  82          
  83          uint8_t modbus_get_function() {
  84   1        return modbus_command_receiver [MODBUS_FUNCTION];
  85   1      }
  86          
  87          void modbus_response_error(uint8_t error) {
  88   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
  89   1        SI_SEGMENT_VARIABLE(i, int, xdata);
  90   1        crc = 0xFFFF;
  91   1        i = 0;
  92   1        modbus_error_response [MODBUS_ADDRESS] = modbus_get_address();
  93   1        modbus_error_response [MODBUS_ERROR] = MODBUS_ERROR_CODE;
  94   1        modbus_error_response [MODBUS_EXCEPTION] = error;
  95   1        crc = calc_crc(modbus_error_response, 3);
  96   1        modbus_error_response [3] = (uint8_t)(crc >> 8);
  97   1        modbus_error_response [4] = (uint8_t)(crc);
  98   1        for(i = 0; i<5; i++) {
  99   2          modbus_push_transmit_buffer(modbus_error_response [i]);
 100   2        }
 101   1      }
 102          
 103          void modbus_process_function_3() {
 104   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 105   1        SI_SEGMENT_VARIABLE(i, uint16_t, xdata);
 106   1        SI_SEGMENT_VARIABLE(register_hi, uint16_t, xdata);
 107   1        SI_SEGMENT_VARIABLE(register_lo, uint16_t, xdata);
 108   1        SI_SEGMENT_VARIABLE(modbus_data, uint8_t, xdata);
 109   1        SI_SEGMENT_VARIABLE(address_hi, uint16_t, xdata);
 110   1        SI_SEGMENT_VARIABLE(address_lo, uint16_t, xdata);
 111   1        SI_SEGMENT_VARIABLE(address, uint16_t, xdata);
 112   1        SI_SEGMENT_VARIABLE(registers_hi, uint16_t, xdata);
 113   1        SI_SEGMENT_VARIABLE(registers_lo, uint16_t, xdata);
 114   1        SI_SEGMENT_VARIABLE(registers, uint16_t, xdata);
 115   1        SI_SEGMENT_VARIABLE(number, uint8_t, xdata);
 116   1        crc = 0xFFFF;
 117   1      
C51 COMPILER V9.53.0.0   MODBUS                                                            04/01/2020 23:34:37 PAGE 3   

 118   1        address_hi = modbus_command_receiver [MODBUS_FIRST_REGISTER_HI];
 119   1        address_lo = modbus_command_receiver [MODBUS_FIRST_REGISTER_LO];
 120   1        address = (address_hi << 8) + address_lo;
 121   1        registers_hi = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_READ_HI];
 122   1        registers_lo = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_READ_LO];
 123   1        registers = (registers_hi << 8) + registers_lo;
 124   1        number = registers << 1;
 125   1        if((address << 1) + number >= MODBUS_DATA_LENGTH) {
 126   2          modbus_response_error(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
 127   2        }
 128   1        else {
 129   2          modbus_data = modbus_get_address();
 130   2          crc = crc16_update(crc, modbus_data);
 131   2          modbus_push_transmit_buffer(modbus_data);
 132   2          
 133   2          modbus_data = 3;
 134   2          crc = crc16_update(crc, modbus_data);
 135   2          modbus_push_transmit_buffer(modbus_data);
 136   2          
 137   2          modbus_data = number;
 138   2          crc = crc16_update(crc, modbus_data);
 139   2          modbus_push_transmit_buffer(modbus_data);
 140   2          
 141   2          for(i=0; i<registers; i++) {
 142   3            register_lo = modbus_buffer_data [(address << 1) + (i << 1)];
 143   3            register_hi = modbus_buffer_data [(address << 1) + (i << 1) + 1];
 144   3            modbus_data = register_lo;
 145   3            crc = crc16_update(crc, modbus_data);
 146   3            modbus_push_transmit_buffer(modbus_data);
 147   3            modbus_data = register_hi;
 148   3            crc = crc16_update(crc, modbus_data);
 149   3            modbus_push_transmit_buffer(modbus_data);
 150   3          }
 151   2          modbus_push_transmit_buffer((uint8_t)(crc >> 8));
 152   2          modbus_push_transmit_buffer((uint8_t)(crc));
 153   2          TI0 = 1;
 154   2          //AD0EN = 1;
 155   2        }
 156   1      }
 157          
 158          bool modbus_check_size_of_func16(int registers_num) {
 159   1        return modbus_receiver_pointer == (MODBUS_FUNCTION_16_BASE_LENGTH + (registers_num << 1));
 160   1      }
 161          
 162          void modbus_process_function_16() {
 163   1        SI_SEGMENT_VARIABLE(crc, uint16_t, xdata);
 164   1        SI_SEGMENT_VARIABLE(i, uint16_t, xdata);
 165   1        SI_SEGMENT_VARIABLE(p, uint16_t, xdata);
 166   1        SI_SEGMENT_VARIABLE(register_hi, uint16_t, xdata);
 167   1        SI_SEGMENT_VARIABLE(register_lo, uint16_t, xdata);
 168   1        SI_SEGMENT_VARIABLE(register_in_hi, uint8_t, xdata);
 169   1        SI_SEGMENT_VARIABLE(register_in_lo, uint8_t, xdata);
 170   1        SI_SEGMENT_VARIABLE(modbus_data, uint8_t, xdata);
 171   1        SI_SEGMENT_VARIABLE(address_hi, uint8_t, xdata);
 172   1        SI_SEGMENT_VARIABLE(address_lo, uint8_t, xdata);
 173   1        SI_SEGMENT_VARIABLE(address, uint16_t, xdata);
 174   1        SI_SEGMENT_VARIABLE(registers_hi, uint8_t, xdata);
 175   1        SI_SEGMENT_VARIABLE(registers_lo, uint8_t, xdata);
 176   1        SI_SEGMENT_VARIABLE(registers, uint16_t, xdata);
 177   1        SI_SEGMENT_VARIABLE(number, uint16_t, xdata);
 178   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
 179   1        
C51 COMPILER V9.53.0.0   MODBUS                                                            04/01/2020 23:34:37 PAGE 4   

 180   1        SFRPAGE_save = SFRPAGE;
 181   1        crc = 0xFFFF;
 182   1        
 183   1        address_hi = modbus_command_receiver [MODBUS_FIRST_REGISTER_HI];
 184   1        address_lo = modbus_command_receiver [MODBUS_FIRST_REGISTER_LO];
 185   1        address = (address_hi << 8) + address_lo;
 186   1        registers_hi = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_WRITE_HI];
 187   1        registers_lo = modbus_command_receiver [MODBUS_NUMBER_OF_REGISTER_TO_WRITE_LO];
 188   1        registers = (registers_hi << 8) + registers_lo;
 189   1        number = registers << 1;
 190   1        if(((address << 1) + number >= MODBUS_DATA_LENGTH) || !modbus_check_size_of_func16(registers)) {
 191   2          modbus_response_error(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
 192   2        }
 193   1        else {
 194   2          resetFlashUpdate();
 195   2          for(i=0; i<registers; i++) {
 196   3            register_in_hi = modbus_command_receiver [(i << 1) + MODBUS_WRITE_REGISTER_OFFSET];
 197   3            register_in_lo = modbus_command_receiver [(i << 1) + 1 + MODBUS_WRITE_REGISTER_OFFSET];
 198   3            register_hi = (address << 1) + (i << 1);
 199   3            register_lo = (address << 1) + (i << 1) + 1;
 200   3            modbus_buffer_data [register_lo] = register_in_lo;
 201   3            modbus_buffer_data [register_hi] = register_in_hi;
 202   3          }
 203   2          modbus_data = modbus_get_address();
 204   2          crc = crc16_update(crc, modbus_data);
 205   2          modbus_push_transmit_buffer(modbus_data);
 206   2          
 207   2          modbus_data = 16;
 208   2          crc = crc16_update(crc, modbus_data);
 209   2          modbus_push_transmit_buffer(modbus_data);
 210   2          
 211   2          modbus_data = address_hi;
 212   2          crc = crc16_update(crc, modbus_data);
 213   2          modbus_push_transmit_buffer(modbus_data);
 214   2          
 215   2          modbus_data = address_lo;
 216   2          crc = crc16_update(crc, modbus_data);
 217   2          modbus_push_transmit_buffer(modbus_data);
 218   2          
 219   2          modbus_data = registers_hi;
 220   2          crc = crc16_update(crc, modbus_data);
 221   2          modbus_push_transmit_buffer(modbus_data);
 222   2          
 223   2          modbus_data = registers_lo;
 224   2          crc = crc16_update(crc, modbus_data);
 225   2          modbus_push_transmit_buffer(modbus_data);
 226   2          
 227   2          modbus_push_transmit_buffer((uint8_t)(crc >> 8));
 228   2          modbus_push_transmit_buffer((uint8_t)(crc));
 229   2          
 230   2          if (isNeedFlashUpdate()) {
 231   3            for (p=0; p<4; p++) {
 232   4              // 4 - pages (one page size is 1024)
 233   4              FLASH_Update(MODBUS_FLASH_ADDRESS + p * 1024, modbus_buffer_data + p * 1024, 1024, 0);
 234   4            }
 235   3          }
 236   2          TI0 = 1;
 237   2          //AD0EN = 1;
 238   2        }
 239   1      }
 240          
 241          bool modbus_command_received() {
C51 COMPILER V9.53.0.0   MODBUS                                                            04/01/2020 23:34:37 PAGE 5   

 242   1        SI_SEGMENT_VARIABLE(SFRPAGE_save, unsigned char, xdata);
 243   1        
 244   1        SFRPAGE_save = SFRPAGE;
 245   1        
 246   1        if(modbus_check_crc(modbus_command_receiver, modbus_receiver_pointer) && modbus_check_address()) {
 247   2          uint8_t function = modbus_get_function();
 248   2          if(function == 3 || function == 16) {
 249   3            if(function ==3) {
 250   4              modbus_process_function_3();
 251   4            }
 252   3            else {
 253   4              modbus_process_function_16();
 254   4            }
 255   3            if (modbus_receiver_pointer < 0xFF) {
 256   4              SFRPAGE = TMR4_PAGE;
 257   4              TR4 = 1;
 258   4              SFRPAGE = UART0_PAGE;
 259   4              AD0EN = 1;
 260   4              SFRPAGE = SFRPAGE_save;
 261   4            }
 262   3          }
 263   2          else {
 264   3            modbus_response_error(MODBUS_ERROR_ILLEGAL_FUNCTION_CODE);
 265   3          }
 266   2          //modbus_receiver_pointer = 0;
 267   2        }
 268   1        sender_pause_timer = 0;
 269   1        modbus_receiver_pointer = 0;
 270   1      }
*** WARNING C173 IN LINE 270 OF modbus.c: missing return-expression
 271          
 272          int get_modbus_receiver_counter() {
 273   1        return sender_pause_timer;
 274   1      }
 275          
 276          void set_modbus_receiver_counter(int mrc) {
 277   1        sender_pause_timer = mrc;
 278   1      }
 279          
 280          void inc_modbus_receiver_counter() {
 281   1        sender_pause_timer++;
 282   1      }
 283          
 284          void modbus_byte_receive(uint8_t input) {
 285   1        sender_pause_timer = 0;
 286   1        modbus_command_receiver [modbus_receiver_pointer++] = input;
 287   1        if(modbus_receiver_pointer == MODBUS_RECEIVER_LENGTH) {
 288   2          modbus_receiver_pointer = 0;
 289   2        }
 290   1      }
 291          
 292          void modbus_transmit_byte() {
 293   1        if(modbus_transmitter_pointer_right > 0) {
 294   2          SBUF0 = modbus_command_transmitter [modbus_transmitter_pointer_left++];
 295   2          if (modbus_transmitter_pointer_left == MODBUS_TRANSMITTER_LENGTH) {
 296   3            modbus_transmitter_pointer_left = 0;
 297   3          }
 298   2        }
 299   1        if(modbus_transmitter_pointer_right == modbus_transmitter_pointer_left) {
 300   2          modbus_transmitter_pointer_right = 0;
 301   2          modbus_transmitter_pointer_left = 0;
 302   2        }
C51 COMPILER V9.53.0.0   MODBUS                                                            04/01/2020 23:34:37 PAGE 6   

 303   1      }
 304          
 305          void modbus_push_transmit_buffer(uint8_t output) {
 306   1        if(output == '\n') {
 307   2           modbus_command_transmitter[modbus_transmitter_pointer_right++] = 0x0d;
 308   2           //TI0 = 1;
 309   2         }
 310   1         else {
 311   2           modbus_command_transmitter[modbus_transmitter_pointer_right++] = output;
 312   2           //TI0 = 1;
 313   2         }
 314   1         if(modbus_transmitter_pointer_right == MODBUS_TRANSMITTER_LENGTH) {
 315   2              modbus_transmitter_pointer_right = 0;
 316   2         }
 317   1      }
 318          
 319          bool modbus_was_sendind_received() {
 320   1        sender_pause_timer++;
 321   1        return (sender_pause_timer > 6 && modbus_receiver_pointer > 0);
 322   1      }
 323          
 324          bool modbus_transmit_buffer_is_empty() {
 325   1        return modbus_transmitter_pointer_right == 0;
 326   1      }
*** WARNING C290 IN LINE 270 OF modbus.c: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1860    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   5053      57
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
